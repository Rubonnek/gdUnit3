{"0": {
    "doc": "About",
    "title": "About",
    "content": "This is the base Jekyll theme. You can find out more info about customizing your Jekyll theme, as well as basic Jekyll usage documentation at jekyllrb.com . You can find the source code for Minima at GitHub: jekyll / minima . You can find the source code for Jekyll at GitHub: jekyll / jekyll . ",
    "url": "/gdUnit3/about/",
    "relUrl": "/about/"
  },"1": {
    "doc": "Home",
    "title": "Draft Version (Work in Progress)",
    "content": " ",
    "url": "/gdUnit3/#draft-version-work-in-progress",
    "relUrl": "/#draft-version-work-in-progress"
  },"2": {
    "doc": "Home",
    "title": "GdUnit3 V2.1.0 - (C# Beta Support)",
    "content": ". What is GdUnit3? . Gd(Godot)Unit(Unit Testing)3(Godot 3.x) . GdUnit3 is an embeded unit testing framework for testing your Gd, C# Scripts and Scenes within the Godot editor. GdUnit3 is very useful for TDD (test driven development) and will help you get your code bug-free. ",
    "url": "/gdUnit3/#gdunit3-v210---c-beta-support",
    "relUrl": "/#gdunit3-v210---c-beta-support"
  },"3": {
    "doc": "Home",
    "title": "Please note that C# test support is currently still in beta and not feature complete. If you have any problems or find any bugs, please report them.",
    "content": "You are welcome to: . | Give Feedback | Suggest Improvements | Report Bugs | . Main Features . | Write and run tests in GdScript or C#(Beta) | Embedded test Inspector in the Godot to navigate over your test suites | Run test-suite(s) by using the context menu on FileSystem, ScriptEditor or GdUnit Inspector | Create test’s directly from the ScriptEditor | A Configurable template for the creation of a new test-suite | A spacious set of Asserts use to verify your code | Argument matchers to verify the behavior of a function call by a specified argument type. | Fluent syntax support | Test Fuzzing support | Mocking a class to simulate the implementation which you define the output of certain function | Spy on a instance to verify that a function has been called with certain parameters. | Mock or Spy on a Scene | Provides a scene runner to simulate interactions on a scene . | Simulate by Input events like mouse and/or keyboard | Simulate scene processing by a certain number of frames | Simulate scene proccessing by waiting for a specific signal | Simulate scene proccessing by waiting for a specific function result | . | Update Notifier to install latest version from GitHub | Command Line Tool | . ",
    "url": "/gdUnit3/#please-note-that-c-test-support-is-currently-still-in-beta-and-not-feature-complete-if-you-have-any-problems-or-find-any-bugs-please-report-them",
    "relUrl": "/#please-note-that-c-test-support-is-currently-still-in-beta-and-not-feature-complete-if-you-have-any-problems-or-find-any-bugs-please-report-them"
  },"4": {
    "doc": "Home",
    "title": "Test Example",
    "content": ". | GdScript | C# | . | class_name GdUnitExampleTest extends GdUnitTestSuite func test_example(): assert_str(\"This is a example message\").has_length(25).starts_with(\"This is a ex\") . | namespace examples { using GdUnit3; using static GdUnit3.Assertions; [TestSuite] public class GdUnitExampleTest { [TestCase] public void Example() { AssertString(\"This is a example message\").HasLength(25).StartsWith(\"This is a ex\"); } } } . | . ",
    "url": "/gdUnit3/#test-example",
    "relUrl": "/#test-example"
  },"5": {
    "doc": "Home",
    "title": "Home",
    "content": " ",
    "url": "/gdUnit3/",
    "relUrl": "/"
  },"6": {
    "doc": "Your First Test",
    "title": "Create your first Test",
    "content": "The fastest way to create a test is to use the built-in “Create Test” function. To do this, open your script that you want to test and right-click on a function and then click “Create Test”. We selected the function full_name to generate a test for it. Thats all, your first test is created! . A test is defined as a function following the pattern test_name([args]): and must start with the prefix “test_” to be identified as a test. The name is freely selectable, but should correspond to the function to be tested. Test arguments are optional and will be explainted later in the advanced testing section. ",
    "url": "/gdUnit3/first_steps/firstTest/#create-your-first-test",
    "relUrl": "/first_steps/firstTest/#create-your-first-test"
  },"7": {
    "doc": "Your First Test",
    "title": "Execute your Test",
    "content": "After your first test is created we want to execute it. Do this by select your test in the editor via right mouse button and click on “Run Tests” or “Debug Tests” . The test run is is visualisized in the GdUnit3 inspector and allows you to inspect the test results. As you can see your first test run results with an failure. line 10: Test not implemented! . By default, a generated test first fails with the failure message “Test not implemented” because the assertion assert_not_yet_implemented() is used in the test. By double-clicking on the failed test you can jump directly to the test failure. ",
    "url": "/gdUnit3/first_steps/firstTest/#execute-your-test",
    "relUrl": "/first_steps/firstTest/#execute-your-test"
  },"8": {
    "doc": "Your First Test",
    "title": "Complete your first Test",
    "content": "To define your test, you must specify what you want to test. For testing, GdUnit provides a large number of asserts to compare an actual value with an expected value. Remeber we generated a test for the function func full_name() -&gt; String: with has a return type of String. To verify the return value of the function replace the assert_not_yet_implemented() with: . func test_full_name() -&gt; void: var person := TestPerson.new(\"King\", \"Arthur\") assert_str(person.full_name()).is_equal(\"King Arthur\") . Do re run the test by press the “Run Button” on the inspector . The test failure is fixed but now we get a warning? . The report shows a message Detect &lt;1&gt; orphan nodes during test execution what happened? . This warning indicates that we have forgotten to release an object. We still have to release the used object (TestPerson) after the test to avoid memory leaks. You can do this manually or with the included auto_free tool . | GdScript (manual) | GdScript (auto_free) | . | func test_full_name() -&gt; void: var person := TestPerson.new(\"King\", \"Arthur\") assert_str(person.full_name()).is_equal(\"King Arthur\") person.free() . | func test_full_name() -&gt; void: var person :TestPerson = auto_free(TestPerson.new(\"King\", \"Arthur\")) assert_str(person.full_name()).is_equal(\"King Arthur\") . | . GdUnit offers Asserts for all basic build-in types and much more. A collection of tests is called Test Suite in GdUnit, look into Test Suite for more details. Now run your test again and it will complete successful. Congratulations you have successfully written your first test. ",
    "url": "/gdUnit3/first_steps/firstTest/#complete-your-first-test",
    "relUrl": "/first_steps/firstTest/#complete-your-first-test"
  },"9": {
    "doc": "Your First Test",
    "title": "Your First Test",
    "content": " ",
    "url": "/gdUnit3/first_steps/firstTest/",
    "relUrl": "/first_steps/firstTest/"
  },"10": {
    "doc": "Installation",
    "title": "Installation",
    "content": "You have to install the GdUnit3 plugin over the AssetLib in the Godot Editor. | Select the tab AssetLib on the top | Enter GdUnit3 in the search bar | Select GdUnit3 and press the install button | . Activate the plugin . | Open your project settings by Project-&gt;Project Settings, click the Plugins tab and activate GdUnit. | After activation the GdUnit3 inspector is displayed in the top left | Done, GdUnit is ready to use | . GdUnit3 Inspector . After successful installation and activation you will find the GdUnit3 inspector on the left side. ",
    "url": "/gdUnit3/first_steps/install/",
    "relUrl": "/first_steps/install/"
  },"11": {
    "doc": "Installation",
    "title": "GdUnit3 and C#",
    "content": "Before using the GdUnit C# test API we need to configure the project. Official Godot documentary . Enable the C# Support . GdUnit3 uses the C# language standard 10.0 and therefore we need to adjust the project settings. | Open your Godot Editor Settings and configure mono builds to use: . | For GdUnit3 version 2.0.0+ you have to swtich to MSBuild (VS Build Tools) | With GdUnit3 version 2.2.0 we fully support .Net6 and LangVersion 10 you have to swtich to dotnet CLI | . | Setup the TargetFramework . GdUnit3 C# API uses the framework netstandard2.1 to support the latest language standard Open you project file (*.csproj), and change: . | under section &lt;PropertyGroup&gt; . | change the TargetFramework to netstandard2.1 | add &lt;LangVersion&gt; | add &lt;CopyLocalLockFileAssemblies&gt;true&lt;/CopyLocalLockFileAssemblies&gt; | . | add the section &lt;ItemGroup&gt; see below | . | . | V2.0.0-V2.1.0 | V2.2.0 | . | &lt;Project Sdk=\"Godot.NET.Sdk/3.3.0\"&gt; &lt;PropertyGroup&gt; &lt;TargetFramework&gt;netstandard2.1&lt;/TargetFramework&gt; &lt;LangVersion&gt;8.0&lt;/LangVersion&gt; &lt;CopyLocalLockFileAssemblies&gt;true&lt;/CopyLocalLockFileAssemblies&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;!--Required for GdUnit3--&gt; &lt;PackageReference Include=\"Microsoft.CodeAnalysis.CSharp\" Version=\"3.2.0\" /&gt; &lt;/ItemGroup&gt; &lt;/Project&gt; . | For C# 10 to work, you need the dotnet 6 SDK installed. dotnet --list-sdks 6.0.101 [C:\\Program Files\\dotnet\\sdk] . If no sdk 6.0 installed you can download it here . If you run in trouble with older SDK’s i suggest to uninstall it. &lt;Project Sdk=\"Godot.NET.Sdk/3.3.0\"&gt; &lt;PropertyGroup&gt; &lt;TargetFrameworks&gt;netstandard2.1&lt;/TargetFrameworks&gt; &lt;LangVersion&gt;10.0&lt;/LangVersion&gt; &lt;!--Force nullable warnings, you can disable if you want--&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt; &lt;CopyLocalLockFileAssemblies&gt;true&lt;/CopyLocalLockFileAssemblies&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;!--Required for GdUnit3--&gt; &lt;PackageReference Include=\"Microsoft.CSharp\" Version=\"4.7.0\" /&gt; &lt;PackageReference Include=\"Microsoft.CodeAnalysis.CSharp\" Version=\"4.2.0\" /&gt; &lt;/ItemGroup&gt; &lt;/Project&gt; . | . | Test C# build settings . Open the MSBuild inspector on the bottom of the Godot editor and press Build Solution The output should show the project is build successfully. | . Install Visual Studio GdUnit3 Extension . To run and debug C# sharp tests inside the VS-Code IDE you need to install the GdUnit3 extension . | Click on the Extensions icon in the activity bar and search for GdUnit3 . | After successful installation you will find the GdUnit3 inspector in the activity bar. | . GdUnit3 Extension Settings . You must first configure the GdUnit3 extension settings to set the path for Godot execution. | Press the settings button on the inspector . | Change the path to where you have installed Godot-Mono on your system . | . ",
    "url": "/gdUnit3/first_steps/install/#gdunit3-and-c",
    "relUrl": "/first_steps/install/#gdunit3-and-c"
  },"12": {
    "doc": "Settings",
    "title": "Settings",
    "content": ". To open the setting press the tools button on the GdUnit inspector. ",
    "url": "/gdUnit3/first_steps/settings/",
    "relUrl": "/first_steps/settings/"
  },"13": {
    "doc": "Settings",
    "title": "Common Settings",
    "content": ". server connection timout . The server connection timout specifies the maximum time in minutes that the test runner client waits when the communication between editor and runner is interrupted. update notification enabled . Enables/disables the GdUnit update notification. When enabled, an update notification is displayed when Godot is started to inform about a new update to be installed. test root folder . Defines the root folder where tests are generated. The tests are usually located parallel to the source code under ‘test’. You can leave it empty to create tests in the source folder. res://project/src/folder_a/folder_b/my_class.gd res://project/test/folder_a/folder_b/my_class_test.gd . test suite naming convention . Configures how to generate the test-suite file name. | AUTO_DETECT - generates the file name by source file naming convention. | SNAKE_CASE - generates the file name in snake case convention. | PASCAL_CASE - generates the file name in pascal case convention. | . test timeout seconds . Configures the default timeout for the test case in seconds. If a test case runs longer than the specified timeout, the test is interrupted and fails. The default timeout can be overriden on test-case level by using the argument timeout. | GdScript | C# | . | # Configures the test case to fail after a maximum of 2 seconds runtime func test_foo(timeout = 2000) -&gt; void: ... | // Configures the test case to fail after a maximum of 2 seconds runtime [TestCase(Timeout = 2000)] public async Task foo() { } . | . ",
    "url": "/gdUnit3/first_steps/settings/#common-settings",
    "relUrl": "/first_steps/settings/#common-settings"
  },"14": {
    "doc": "Settings",
    "title": "Report Settings",
    "content": ". Asserts . verbose errors . Suppresses internal error reporting for failed assert conditions. verbose warnings . Suppresses internal warning reporting for failed assert conditions. Godot . Push Error . Reports Godot push_error() notifications and let the test fail (default disabled) . Script Error . Reports Godot gd script errors and let the test fail . Common . verbose orphans . Enable/disable the orphan node reporting . ",
    "url": "/gdUnit3/first_steps/settings/#report-settings",
    "relUrl": "/first_steps/settings/#report-settings"
  },"15": {
    "doc": "Settings",
    "title": "Templates",
    "content": ". test suite template . This template is used to create your test-suite by using the context menu in the editor to create a new test-case. You can modify and personalize the template using the tags provided. All supported tags can be viewed by pressing the Supported Tags button. ",
    "url": "/gdUnit3/first_steps/settings/#templates",
    "relUrl": "/first_steps/settings/#templates"
  },"16": {
    "doc": "Array Assert",
    "title": "Array Assertions",
    "content": "An assertion tool to verify arrays. | GdScript | C# | . | | Function | Description | . | is_null | Verifies that the current value is null. | . | is_not_null | Verifies that the current value is not null. | . | is_equal | Verifies that the current Array is equal to the given one. | . | is_equal_ignoring_case | Verifies that the current Array is equal to the given one, ignoring case considerations. | . | is_not_equal | Verifies that the current Array is not equal to the given one. | . | is_not_equal_ignoring_case | Verifies that the current Array is not equal to the given one, ignoring case considerations. | . | is_empty | Verifies that the current Array is empty, it has a size of 0. | . | is_not_empty | Verifies that the current Array is not empty, it has a size of minimum 1. | . | has_size | Verifies that the current Array has a size of given value. | . | contains | Verifies that the current Array contains the given values, in any order. | . | contains_exactly | Verifies that the current Array contains exactly only the given values and nothing else, in same order. | . | contains_exactly_in_any_order | Verifies that the current Array contains exactly only the given values and nothing else, in any order. | . | extract | Extracts all values by given function name and optional arguments. | . | extractv | Extracts all values by given extractor’s. | . | | Function | Description | . | IsNull | Verifies that the current value is null. | . | IsNotNull | Verifies that the current value is not null. | . | IsEqual | Verifies that the current Array is equal to the given one. | . | IsEqualIgnoringCase | Verifies that the current Array is equal to the given one, ignoring case considerations. | . | IsNotEqual | Verifies that the current Array is not equal to the given one. | . | IsNotEqualIgnoringNase | Verifies that the current Array is not equal to the given one, ignoring case considerations. | . | IsEmpty | Verifies that the current Array is empty, it has a size of 0. | . | IsNotEmpty | Verifies that the current Array is not empty, it has a size of minimum 1. | . | HasNize | Verifies that the current Array has a size of given value. | . | Contains | Verifies that the current Array contains the given values, in any order. | . | ContainsExactly | Verifies that the current Array contains exactly only the given values and nothing else, in same order. | . | ContainsExactlyInAnyOrder | Verifies that the current Array contains exactly only the given values and nothing else, in any order. | . | Extract | Extracts all values by given function name and optional arguments. | . | ExtractV | Extracts all values by given extractor’s. | . | . ",
    "url": "/gdUnit3/asserts/assert-array/#array-assertions",
    "relUrl": "/asserts/assert-array/#array-assertions"
  },"17": {
    "doc": "Array Assert",
    "title": "Array Assert Examples",
    "content": "is_null . Verifies that the current value is null. | GdScript | C# | . | func assert_array(&lt;current&gt;).is_null() -&gt; GdUnitArrayAssert . # this assertion succeeds assert_array(null).is_null() # should fail because the array not null assert_array([]).is_null() . | public static IArrayAssert AssertArray(&lt;current&gt;).IsNull() . // this assertion succeeds AssertArray(null).IsNull(); // should fail because the array not null AssertArray(new int[]{}).IsNull(); . | . is_not_null . Verifies that the current value is not null. | GdScript | C# | . | func assert_array(&lt;current&gt;).is_not_null() -&gt; GdUnitArrayAssert . # this assertion succeeds assert_array([]).is_not_null() # should fail because the array is null assert_array(null).is_not_null() . | public static IArrayAssert AssertArray(&lt;current&gt;).IsNotNull() . // this assertion succeeds AssertArray(new int[]{}).IsNotNull(); // should fail because the array is null AssertArray(null).IsNotNull(); . | . is_equal . Verifies that the current Array is equal to the given one. | GdScript | C# | . | func assert_array(&lt;current&gt;).is_equal(&lt;expected&gt;) -&gt; GdUnitArrayAssert . # this assertion succeeds assert_array([1, 2, 3, 4, 2, 5]).is_equal([1, 2, 3, 4, 2, 5]) # should fail because the array not contains same elements and has diff size assert_array([1, 2, 4, 5]).is_equal([1, 2, 3, 4, 2, 5]) . | public static IArrayAssert AssertArray(&lt;current&gt;).IsEqual(&lt;expected&gt;) . // this assertion succeeds AssertArray(new int[]{1, 2, 3, 4, 2, 5}).IsEqual(new int[]{1, 2, 3, 4, 2, 5}); // should fail because the array not contains same elements and has diff size AssertArray(new int[]{1, 2, 4, 2, 5}).IsEqual(new int[]{1, 2, 3, 4, 2, 5}); . | . is_equal_ignoring_case . Verifies that the current Array is equal to the given one, ignoring case considerations. | GdScript | C# | . | func assert_array(&lt;current&gt;).is_equal_ignoring_case(&lt;expected&gt;) -&gt; GdUnitArrayAssert . # this assertion succeeds assert_array([\"this\", \"is\", \"a\", \"message\"]).is_equal_ignoring_case([\"This\", \"is\", \"a\", \"Message\"]) # should fail because the array not contains same elements assert_array([\"this\", \"is\", \"a\", \"message\"]).is_equal_ignoring_case([\"This\", \"is\", \"an\", \"Message\"]) . | public static IArrayAssert AssertArray(&lt;current&gt;).IsEqualIgnoringCase(&lt;expected&gt;) . // this assertion succeeds AssertArray(new sring[]{\"this\", \"is\", \"a\", \"message\"}).IsEqualIgnoringCase(new sring[]{\"This\", \"is\", \"a\", \"Message\"}); // should fail because the array not contains same elements AssertArray(new sring[]{\"this\", \"is\", \"a\", \"message\"}).IsEqualIgnoringCase(new sring[]{\"This\", \"is\", \"an\", \"Message\"}); . | . is_not_equal . Verifies that the current Array is not equal to the given one. | GdScript | C# | . | func assert_array(&lt;current&gt;).is_not_equal(&lt;expected&gt;) -&gt; GdUnitArrayAssert . # this assertion succeeds assert_array([1, 2, 3, 4, 5]).is_not_equal([1, 2, 3, 4, 5, 6]) # should fail because the array contains same elements assert_array([1, 2, 3, 4, 5]).is_not_equal([1, 2, 3, 4, 5]) . | public static IArrayAssert AssertArray(&lt;current&gt;).IsNotEqual(&lt;expected&gt;) . // this assertion succeeds AssertArray(new int[]{1, 2, 3, 4, 5}).IsNotEqual(new int[]{1, 2, 3, 4, 5, 6}); // should fail because the array contains same elements AssertArray(new int[]{1, 2, 3, 4, 5}).IsNotEqual(new int[]{1, 2, 3, 4, 5}); . | . is_not_equal_ignoring_case . Verifies that the current Array is not equal to the given one, ignoring case considerations. | GdScript | C# | . | func assert_array(&lt;current&gt;).is_not_equal_ignoring_case(&lt;expected&gt;) -&gt; GdUnitArrayAssert . # this assertion succeeds assert_array([\"this\", \"is\", \"a\", \"message\"]).is_not_equal_ignoring_case([\"This\", \"is\", \"an\", \"Message\"]) # should fail because the array contains same elements ignoring case sensitive assert_array([\"this\", \"is\", \"a\", \"message\"]).is_not_equal_ignoring_case([\"This\", \"is\", \"a\", \"Message\"]) . | public static IArrayAssert AssertArray(&lt;current&gt;).IsNotEqualIgnoringCase(&lt;expected&gt;) . // this assertion succeeds AssertArray(new string[]{\"this\", \"is\", \"a\", \"message\"}).IsNotEqualIgnoringCase(new string[]{\"This\", \"is\", \"an\", \"Message\"}); // should fail because the array contains same elements ignoring case sensitive AssertArray(new string[]{\"this\", \"is\", \"a\", \"message\"}).IsNotEqualIgnoringCase(new string[]{\"This\", \"is\", \"a\", \"Message\"}); . | . is_empty . Verifies that the current Array is empty, it has a size of 0. | GdScript | C# | . | func assert_array(&lt;current&gt;).is_empty() -&gt; GdUnitArrayAssert . # this assertion succeeds assert_array([]).is_empty() # should fail because the array is not empty it has a size of one assert_array([1]).is_empty() . | public static IArrayAssert AssertArray(&lt;current&gt;).IsEmpty() . // this assertion succeeds AssertArray(new int[]{}).IsEmpty(); // should fail because the array is not empty it has a size of one AssertArray(new int[]{1}).IsEmpty(); . | . is_not_empty . Verifies that the current Array is not empty, it has a size of minimum 1. | GdScript | C# | . | func assert_array(&lt;current&gt;).is_not_empty() -&gt; GdUnitArrayAssert . # this assertion succeeds assert_array([1]).is_not_empty() # should fail because the array is empty assert_array([]).is_not_empty() . | public static IArrayAssert AssertArray(&lt;current&gt;).IsNotEmpty() . // this assertion succeeds AssertArray(new int[]{1}).IsNotEmpty(); // should fail because the array is empty AssertArray(new int[]{}).IsNotEmpty(); . | . has_size . Verifies that the current Array has a size of given value. | GdScript | C# | . | func assert_array(&lt;current&gt;).has_size(&lt;expected&gt;) -&gt; GdUnitArrayAssert . # this assertion succeeds assert_array([1, 2, 3, 4, 5]).has_size(5) assert_array([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]).has_size(6) # should fail because the array has a size of 5 and not 4 assert_array([1, 2, 3, 4, 5]).has_size(4) . | public static IArrayAssert AssertArray(&lt;current&gt;).HasSize(&lt;expected&gt;) . // this assertion succeeds AssertArray(new int[]{1, 2, 3, 4, 5}).HasSize(5); AssertArray(new string[]{\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"}).HasSize(6); // should fail because the array has a size of 5 and not 4 AssertArray(new int[]{1, 2, 3, 4, 5}).HasSize(4); . | . contains . Verifies that the current Array contains the given values, in any order. | GdScript | C# | . | func assert_array(&lt;current&gt;).contains(&lt;expected&gt;) -&gt; GdUnitArrayAssert . # this assertion succeeds assert_array([1, 2, 3, 4, 5]).contains([5, 2]) # should fail because the array not contains 7 and 6 assert_array([1, 2, 3, 4, 5]).contains([2, 7, 6]) . | public static IArrayAssert AssertArray(&lt;current&gt;).Contains(&lt;expected&gt;) . // this assertion succeeds AssertArray(new int[]{1, 2, 3, 4, 5}).Contains(5, 2); // should fail because the array not contains 7 and 6 AssertArray(new int[]{1, 2, 3, 4, 5}).Contains(2, 7, 6): . | . contains_exactly . Verifies that the current Array contains exactly only the given values and nothing else, in same order. | GdScript | C# | . | func assert_array(&lt;current&gt;).contains_exactly(&lt;expected&gt;) -&gt; GdUnitArrayAssert . # this assertion succeeds assert_array([1, 2, 3, 4, 5]).contains_exactly([1, 2, 3, 4, 5]) # should fail because the array contains the same elements but in a different order assert_array([1, 2, 3, 4, 5]).contains_exactly([1, 4, 3, 2, 5]) . | public static IArrayAssert AssertArray(&lt;current&gt;).ContainsExactly(&lt;expected&gt;) . // this assertion succeeds AssertArray(new int[]{1, 2, 3, 4, 5}).ContainsExactly(1, 2, 3, 4, 5); // should fail because the array contains the same elements but in a different order AssertArray(new int[]{1, 2, 3, 4, 5}).ContainsExactly(1, 4, 3, 2, 5); . | . contains_exactly_in_any_order . Verifies that the current Array contains exactly only the given values and nothing else, in any order. | GdScript | C# | . | func contains_exactly_in_any_order(expected) -&gt; GdUnitArrayAssert: . # this assertion succeeds, contains all elements but in a different order assert_array([1, 2, 3, 4, 5]).contains_exactly_in_any_order([1, 5, 3, 4, 2]) # should fail because the array contains not exacly all elements (5 is missing) assert_array([1, 2, 3, 4]).contains_exactly([1, 4, 3, 2]) . | public static IArrayAssert AssertArray(&lt;current&gt;).ContainsExactlyInAnyOrder(&lt;expected&gt;) . // this assertion succeeds, contains all elements but in a different order AssertArray(new int[]{1, 2, 3, 4, 5}).ContainsExactlyInAnyOrder(1, 5, 3, 4, 2); // should fail because the array contains not exacly all elements (5 is missing) AssertArray(new int[]{1, 2, 3, 4}).ContainsExactlyInAnyOrder(1, 4, 3, 2); . | . extract . Extracts all values by given function name and optional arguments into a new ArrayAssert. If the elements not accessible by func_name the value is converted to \"n.a\", expecting null values . You can use function name chaining e.g. get_parent.get_name . | GdScript | C# | . | func assert_array(&lt;current&gt;).extract(&lt;func_name :String&gt;, [args :Array]) -&gt; GdUnitArrayAssert func assert_array(&lt;current&gt;).extract(&lt;func_name :String&gt;[.&lt;func_name&gt;, ..]) -&gt; GdUnitArrayAssert . # extracting only by function name \"get_class\" assert_array([Reference.new(), 2, AStar.new(), auto_free(Node.new())])\\ .extract(\"get_class\")\\ .contains_exactly([\"Reference\", \"n.a.\", \"AStar\", \"Node\"]) # extracting by a function name and arguments assert_array([Reference.new(), 2, AStar.new(), auto_free(Node.new())])\\ .extract(\"has_signal\", [\"tree_entered\"])\\ .contains_exactly([false, \"n.a.\", false, true]) . | public static IArrayAssert AssertArray(&lt;current&gt;).Extract(&lt;func_name :String&gt;, &lt;args&gt;); public static IArrayAssert AssertArray(&lt;current&gt;).Extract(&lt;func_name :String&gt;[.&lt;func_name&gt;], &lt;args&gt;]); . // extracting only by function name \"get_class\" AssertArray(new object[] { new Reference(), 2, new AStar(), AutoFree(new Node()) }) .Extract(\"get_class\") .ContainsExactly(\"Reference\", \"n.a.\", \"AStar\", \"Node\"); // extracting by a function name and arguments AssertArray(new object[] { new Reference(), 2, new AStar(), AutoFree(new Node()) }) .Extract(\"has_signal\", [\"tree_entered\"]) .ContainsExactly(false, \"n.a.\", false, true); . | . extractv . Extracts all values by given extractor’s into a new ArrayAssert, a maximum of teen extractors currently supported. If the elements not extractable than the value is converted to \"n.a\", expecting null values . To check multiple extracted values you must use tuple, a tuple can hold two up to ten values . | GdScript | C# | . | func assert_array(&lt;current&gt;).extractv(&lt;extractor:GdUnitValueExtractor&gt;[, extractor, ..]) -&gt; GdUnitArrayAssert . # example object for extraction class TestObj: var _name :String var _value var _x func _init(name :String, value, x = null): _name = name _value = value _x = x func get_name() -&gt; String: return _name func get_value(): return _value func get_x(): return _x . # single extract assert_array([1, false, 3.14, null, Color.aliceblue])\\ .extractv(extr(\"get_class\"))\\ .contains_exactly([\"n.a.\", \"n.a.\", \"n.a.\", null, \"n.a.\"]) # tuple of two assert_array([TestObj.new(\"A\", 10), TestObj.new(\"B\", \"foo\"), Color.aliceblue, TestObj.new(\"C\", 11)])\\ .extractv(extr(\"get_name\"), extr(\"get_value\"))\\ .contains_exactly([ tuple(\"A\", 10), tuple(\"B\", \"foo\"), tuple(\"n.a.\", \"n.a.\"), tuple(\"C\", 11)]) # tuple of three assert_array([TestObj.new(\"A\", 10), TestObj.new(\"B\", \"foo\", \"bar\"), TestObj.new(\"C\", 11, 42)])\\ .extractv(extr(\"get_name\"), extr(\"get_value\"), extr(\"get_x\"))\\ .contains_exactly([ tuple(\"A\", 10, null), tuple(\"B\", \"foo\", \"bar\"), tuple(\"C\", 11, 42)]) . | public static IArrayAssert AssertArray(&lt;current&gt;).ExtractV(&lt;extractor:IValueExtractor&gt;[, extractor, ..]); . // example object for extraction class TestObj : Godot.Reference { string _name; object _value; object _x; public TestObj(string name, object value, object x = null) { _name = name; _value = value; _x = x; } public string GetName() =&gt; _name; public object GetValue() =&gt; _value; public object GetX() =&gt; _x; } . // single extract AssertArray(new object[] { 1, false, 3.14, null, Colors.AliceBlue }) .ExtractV(Extr(\"GetClass\")) .ContainsExactly(\"n.a.\", \"n.a.\", \"n.a.\", null, \"n.a.\"); // tuple of two AssertArray(new object[] { new TestObj(\"A\", 10), new TestObj(\"B\", \"foo\"), Colors.AliceBlue, new TestObj(\"C\", 11) }) .ExtractV(Extr(\"GetName\"), Extr(\"GetValue\")) .ContainsExactly(Tuple(\"A\", 10), Tuple(\"B\", \"foo\"), Tuple(\"n.a.\", \"n.a.\"), Tuple(\"C\", 11)); // tuple of three AssertArray(new object[] { new TestObj(\"A\", 10), new TestObj(\"B\", \"foo\", \"bar\"), new TestObj(\"C\", 11, 42) }) .ExtractV(Extr(\"GetName\"), Extr(\"GetValue\"), Extr(\"GetX\")) .ContainsExactly(Tuple(\"A\", 10, null), Tuple(\"B\", \"foo\", \"bar\"), Tuple(\"C\", 11, 42)); . | . custom value extractor . GdUnit provides extr function to build a value extractor by given function name and optional arguments. You can use also function name chaining e.g. get_parent.get_name . | GdScript | C# | . | # Builds an extractor by given function name and optional arguments static func extr(&lt;func_name :String&gt;[.func_name, ..], [args :Array]) -&gt; GdUnitValueExtractor: . | // Builds an extractor by given function name and optional arguments public static IValueExtractor Extr(string methodName, params object[] args); . | . ",
    "url": "/gdUnit3/asserts/assert-array/#array-assert-examples",
    "relUrl": "/asserts/assert-array/#array-assert-examples"
  },"18": {
    "doc": "Array Assert",
    "title": "Array Assert",
    "content": " ",
    "url": "/gdUnit3/asserts/assert-array/",
    "relUrl": "/asserts/assert-array/"
  },"19": {
    "doc": "Boolean Assert",
    "title": "Boolean Assertions",
    "content": "An assertion tool to verify boolean values. | GdScript | C# | . | | Function | Description | . | is_true | Verifies that the current value is true. | . | is_false | Verifies that the current value is false. | . | is_equal | Verifies that the current value is equal to the given one. | . | is_not_equal | Verifies that the current value is not equal to the given one. | . | | Function | Description | . | IsTrue | Verifies that the current value is true. | . | IsFalse | Verifies that the current value is false. | . | IsEqual | Verifies that the current value is equal to the given one. | . | IsNotEqual | Verifies that the current value is not equal to the given one. | . | . ",
    "url": "/gdUnit3/asserts/assert-bool/#boolean-assertions",
    "relUrl": "/asserts/assert-bool/#boolean-assertions"
  },"20": {
    "doc": "Boolean Assert",
    "title": "Boolean Assert Examples",
    "content": "is_true . Verifies that the current value is true. | GdScript | C# | . | func assert_str(&lt;current&gt;).is_true() -&gt; GdUnitBoolAssert . # this assertion succeeds assert_bool(true).is_true() # this assertion fails because the value is false and not true assert_bool(false).is_true() . | public static IBoolAssert AssertBool(&lt;current&gt;).IsTrue() . // this assertion succeeds AssertBool(true).IsTrue(); // this assertion fails because the value is false and not true AssertBool(false).IsTrue(); . | . is_false . Verifies that the current value is false. | GdScript | C# | . | func assert_bool(&lt;current&gt;).is_false() -&gt; GdUnitBoolAssert . # this assertion succeeds assert_bool(false).is_false() # this assertion fails because the value is true and not false assert_bool(true).is_false() . | public static IBoolAssert AssertBool(&lt;current&gt;).IsFalse(); . // this assertion succeeds AssertBool(false).IsFalse(); // this assertion fails because the value is true and not false AssertBool(true).IsFalse(); . | . is_equal . Verifies that the current value is equal to the given one. | GdScript | C# | . | func assert_str(&lt;current&gt;).is_equal(&lt;expected&gt;) -&gt; GdUnitBoolAssert . # this assertion succeeds assert_bool(false).is_equal(false) # this assertion fails because the value is false and not true assert_bool(false).is_equal(true) . | public static IBoolAssert AssertBool(&lt;current&gt;).IsEqual(&lt;expected&gt;); . // this assertion succeeds AssertBool(false).IsEqual(false); // this assertion fails because the value is false and not true AssertBool(false).IsEqual(true); . | . is_not_equal . Verifies that the current value is not equal to the given one. | GdScript | C# | . | func assert_str(&lt;current&gt;).is_not_equal(&lt;expected&gt;) -&gt; GdUnitBoolAssert . # this assertion succeeds assert_bool(false).is_not_equal(true) # this assertion fails because the value is false and should not be false assert_bool(false).is_not_equal(false) . | public static IBoolAssert AssertBool(&lt;current&gt;).IsNotEqual(&lt;expected&gt;); . // this assertion succeeds AssertBool(false).IsNotEqual(true); // this assertion fails because the value is false and should not be false AssertBool(false).IsNotEqual(false); . | . ",
    "url": "/gdUnit3/asserts/assert-bool/#boolean-assert-examples",
    "relUrl": "/asserts/assert-bool/#boolean-assert-examples"
  },"21": {
    "doc": "Boolean Assert",
    "title": "Boolean Assert",
    "content": " ",
    "url": "/gdUnit3/asserts/assert-bool/",
    "relUrl": "/asserts/assert-bool/"
  },"22": {
    "doc": "Dictionary Assert",
    "title": "Dictionary Assertions",
    "content": "An assertion tool to verify dictionaries. | GdScript | C# | . | | Function | Description | . | is_null | Verifies that the current value is null. | . | is_not_null | Verifies that the current value is not null. | . | is_equal | Verifies that the current dictionary is equal to the given one, ignoring order. | . | is_not_equal | Verifies that the current dictionary is not equal to the given one, ignoring order. | . | is_empty | Verifies that the current dictionary is empty, it has a size of 0. | . | is_not_empty | Verifies that the current dictionary is not empty, it has a size of minimum 1. | . | has_size | Verifies that the current dictionary has a size of given value. | . | contains_keys | Verifies that the current dictionary contains the given keys. | . | contains_not_keys | Verifies that the current dictionary not contains the given keys. | . | contains_key_value | Verifies that the current dictionary contains the given key and value. | . | Not yet implemented! . | . ",
    "url": "/gdUnit3/asserts/assert-dictionary/#dictionary-assertions",
    "relUrl": "/asserts/assert-dictionary/#dictionary-assertions"
  },"23": {
    "doc": "Dictionary Assert",
    "title": "Dictionary Assert Examples",
    "content": "is_null . Verifies that the current value is null. | GdScript | . | func assert_dict(&lt;current&gt;).is_null() -&gt; GdUnitDictionaryAssert . # this assertion succeeds assert_dict(null).is_null() # should fail because the dictionary is not null assert_dict({}).is_null() . | . is_not_null . Verifies that the current value is not null. | GdScript | . | func assert_dict(&lt;current&gt;).is_not_null() -&gt; GdUnitDictionaryAssert . # this assertion succeeds assert_dict({}).is_not_null() # should fail because the dictionary is null assert_dict(null).is_not_null() . | . is_equal . Verifies that the current dictionary is equal to the given one, ignoring order. | GdScript | . | func assert_dict(&lt;current&gt;).is_equal(&lt;expected&gt;) -&gt; GdUnitDictionaryAssert: . # this assertion succeeds assert_dict({}).is_equal({}) assert_dict({1:1}).is_equal({1:1}) assert_dict({1:1, \"key_a\": \"value_a\"}).is_equal({1:1, \"key_a\": \"value_a\" }) # different order is also equals assert_dict({\"key_a\": \"value_a\", 1:1}).is_equal({1:1, \"key_a\": \"value_a\" }) # should fail assert_dict({}).is_equal({1:1}) assert_dict({1:1}).is_equal({1:2}) assert_dict({1:1, \"key_a\": \"value_a\"}).is_equal({1:1, \"key_b\": \"value_b\"}) . | . is_not_equal . Verifies that the current dictionary is not equal to the given one, ignoring order. | GdScript | . | func assert_dict(&lt;current&gt;).is_not_equal(&lt;expected&gt;) -&gt; GdUnitDictionaryAssert: . # this assertion succeeds assert_dict(null).is_not_equal({}) assert_dict({}).is_not_equal(null) assert_dict({}).is_not_equal({1:1}) assert_dict({1:1}).is_not_equal({}) assert_dict({1:1}).is_not_equal({1:2}) assert_dict({2:1}).is_not_equal({1:1}) assert_dict({1:1}).is_not_equal({1:1, \"key_a\": \"value_a\"}) assert_dict({1:1, \"key_a\": \"value_a\"}).is_not_equal({1:1}) assert_dict({1:1, \"key_a\": \"value_a\"}).is_not_equal({1:1,\"key_b\": \"value_b\"}) # should fail assert_dict({}).is_not_equal({}) assert_dict({1:1}).is_not_equal({1:1}) assert_dict({1:1, \"key_a\": \"value_a\"}).is_not_equal({1:1, \"key_a\": \"value_a\"}) assert_dict({\"key_a\": \"value_a\", 1:1}).is_not_equal({1:1, \"key_a\": \"value_a\"}) . | . is_empty . Verifies that the current dictionary is empty, it has a size of 0. | GdScript | . | func assert_dict(&lt;current&gt;).is_empty() -&gt; GdUnitDictionaryAssert: . # this assertion succeeds assert_dict({}).is_empty() # should fail assert_dict(null).is_empty() assert_dict({1:1}).is_empty() . | . is_not_empty . Verifies that the current dictionary is not empty, it has a size of minimum 1. | GdScript | . | func assert_dict(&lt;current&gt;).is_not_empty() -&gt; GdUnitDictionaryAssert: . # this assertion succeeds assert_dict({1:1}).is_not_empty() assert_dict({1:1, \"key_a\": \"value_a\"}).is_not_empty() # should fail assert_dict(null).is_not_empty() assert_dict({}).is_not_empty() . | . has_size . Verifies that the current dictionary has a size of given value. | GdScript | . | func assert_dict(&lt;current&gt;).has_size(&lt;expected&gt;) -&gt; GdUnitDictionaryAssert: . # this assertion succeeds assert_dict({}).has_size(0) assert_dict({1:1, 2:1, 3:1}).has_size(3) # should fail assert_dict(null).has_size(0) assert_dict({}).has_size(1) assert_dict({1:1, 2:1, 3:1}).has_size(4) . | . contains_keys . Verifies that the current dictionary contains the given key(s). | GdScript | . | func assert_dict(&lt;current&gt;).contains_keys(&lt;expected&gt;: Array) -&gt; GdUnitDictionaryAssert: . # this assertion succeeds assert_dict({1:1, 2:2, 3:3}).contains_keys([2]) assert_dict({1:1, 2:2, \"key_a\": \"value_a\"}).contains_keys([2, \"key_a\"]) # should fail assert_dict({1:1, 3:3}).contains_keys([2]) # key 2 is missing assert_dict({1:1, 3:3}).contains_keys([1, 4]) # key 4 is missing . | . contains_not_keys . Verifies that the current dictionary not contains the given key(s). | GdScript | . | func assert_dict(&lt;current&gt;).contains_not_keys(&lt;expected&gt;: Array) -&gt; GdUnitDictionaryAssert: . # this assertion succeeds assert_dict({}).contains_not_keys([2]) assert_dict({1:1, 3:3}).contains_not_keys([2]) assert_dict({1:1, 3:3}).contains_not_keys([2, 4]) # should fail assert_dict({1:1, 2:2, 3:3}).contains_not_keys([2, 4]) # but contains 2 assert_dict({1:1, 2:2, 3:3}.contains_not_keys([1, 2, 3, 4]) # but contains 1, 2, 3 . | . contains_key_value . Verifies that the current dictionary contains the given key and value. | GdScript | . | func contains_key_value(&lt;key&gt;, &lt;value&gt;) -&gt; GdUnitDictionaryAssert: . # this assertion succeeds assert_dict({1:1}).contains_key_value(1, 1) assert_dict({1:1, 2:2, 3:3}).contains_key_value(3, 3).contains_key_value(1, 1) # should fail assert_dict({1:1}.contains_key_value(1, 2) # contains key '1' but with value '2' . | . ",
    "url": "/gdUnit3/asserts/assert-dictionary/#dictionary-assert-examples",
    "relUrl": "/asserts/assert-dictionary/#dictionary-assert-examples"
  },"24": {
    "doc": "Dictionary Assert",
    "title": "Dictionary Assert",
    "content": " ",
    "url": "/gdUnit3/asserts/assert-dictionary/",
    "relUrl": "/asserts/assert-dictionary/"
  },"25": {
    "doc": "File Assert",
    "title": "File Assertions",
    "content": ". | GdScript | C# | . | | Function | Description | . | is_file | Verifies the given resource is a file | . | exists | Verifies the given resource exists | . | is_script | Verifies the given resource is a gd script | . | contains_exactly | Verifies the given resource contains the content | . | ",
    "url": "/gdUnit3/asserts/assert-file/#file-assertions",
    "relUrl": "/asserts/assert-file/#file-assertions"
  },"26": {
    "doc": "File Assert",
    "title": "Not yet supported!",
    "content": "| . ",
    "url": "/gdUnit3/asserts/assert-file/#not-yet-supported",
    "relUrl": "/asserts/assert-file/#not-yet-supported"
  },"27": {
    "doc": "File Assert",
    "title": "File Assert Examples",
    "content": "&lt;-TBD-&gt; . ",
    "url": "/gdUnit3/asserts/assert-file/#file-assert-examples",
    "relUrl": "/asserts/assert-file/#file-assert-examples"
  },"28": {
    "doc": "File Assert",
    "title": "File Assert",
    "content": " ",
    "url": "/gdUnit3/asserts/assert-file/",
    "relUrl": "/asserts/assert-file/"
  },"29": {
    "doc": "Float/Double Assert",
    "title": "Float/Double Assertions",
    "content": "An assertion tool to verify float values. | GdScript | C# | . | | Function | Description | . | is_null | Verifies that the current value is null. | . | is_not_null | Verifies that the current value is not null. | . | is_equal | Verifies that the current value is equal to the given one. | . | is_not_equal | Verifies that the current value is not equal to the given one. | . | is_equal_approx | Verifies that the current and expected value are approximately equal. | . | is_less | Verifies that the current value is less than the given one. | . | is_less_equal | Verifies that the current value is less than or equal the given one. | . | is_greater | Verifies that the current value is greater than the given one. | . | is_greater_equal | Verifies that the current value is greater than or equal the given one. | . | is_negative | Verifies that the current value is negative. | . | is_not_negative | Verifies that the current value is not negative. | . | is_zero | Verifies that the current value is equal to zero. | . | is_not_zero | Verifies that the current value is not equal to zero. | . | is_in | Verifies that the current value is in the given set of values. | . | is_not_in | Verifies that the current value is not in the given set of values. | . | is_between | Verifies that the current value is between the given boundaries (inclusive). | . | | Function | Description | . | IsNull | Verifies that the current value is null. | . | IsNotNull | Verifies that the current value is not null. | . | IsEqual | Verifies that the current value is equal to the given one. | . | IsNotEqual | Verifies that the current value is not equal to the given one. | . | IsEqualApprox | Verifies that the current and expected value are approximately equal. | . | IsLess | Verifies that the current value is less than the given one. | . | IsLessEqual | Verifies that the current value is less than or equal the given one. | . | IsGreater | Verifies that the current value is greater than the given one. | . | IsGreaterEqual | Verifies that the current value is greater than or equal the given one. | . | IsNegative | Verifies that the current value is negative. | . | IsNotNegative | Verifies that the current value is not negative. | . | IsZero | Verifies that the current value is equal to zero. | . | IsNotZero | Verifies that the current value is not equal to zero. | . | IsIn | Verifies that the current value is in the given set of values. | . | IsNotIn | Verifies that the current value is not in the given set of values. | . | IsNetween | Verifies that the current value is between the given boundaries (inclusive). | . | . ",
    "url": "/gdUnit3/asserts/assert-float/#floatdouble-assertions",
    "relUrl": "/asserts/assert-float/#floatdouble-assertions"
  },"30": {
    "doc": "Float/Double Assert",
    "title": "Float Assert Examples",
    "content": "is_equal . Verifies that the current value is equal to the given one. | GdScript | C# | . | func assert_float(&lt;current&gt;).is_equal(&lt;expected&gt;) -&gt; GdUnitFloatAssert . # this assertion succeeds assert_float(23.2).is_equal(23.2) # this assertion fails because 23.2 are not equal to 23.4 assert_float(23.2).is_equal(23.4) . | public static IDoubleAssert AssertFloat(&lt;current&gt;).IsEqual(&lt;expected&gt;) . // this assertion succeeds AssertFloat(23.2).IsEqual(23.2); // this assertion fails because 23.2 are not equal to 23.4 AssertFloat(23.2).IsEqual(23.4); . | . is_not_equal . Verifies that the current value is not equal to the given one. | GdScript | C# | . | func assert_float(&lt;current&gt;).is_not_equal(&lt;expected&gt;) -&gt; GdUnitFloatAssert . # this assertion succeeds assert_float(23.2).is_not_equal(23.4) # this assertion fails because 23.2 are equal to 23.2 assert_float(23.2).is_not_equal(23.2) . | public static IDoubleAssert AssertFloat(&lt;current&gt;).IsNotEqual(&lt;expected&gt;) . // this assertion succeeds AssertFloat(23.2).IsNotEqual(23.4); // this assertion fails because 23.2 are equal to 23.2 AssertFloat(23.2).IsNotEqual(23.2); . | . is_equal_approx . Verifies that the current and expected value are approximately equal. | GdScript | C# | . | func is_equal_approx(&lt;expected&gt;, &lt;approx&gt;) -&gt; GdUnitFloatAssert: . # this assertion succeeds assert_float(23.19).is_equal_approx(23.2, 0.01) assert_float(23.20).is_equal_approx(23.2, 0.01) assert_float(23.21).is_equal_approx(23.2, 0.01) # this assertion fails because 23.18 and 23.22 are not equal approximately to 23.2 +/- 0.01 assert_float(23.18).is_equal_approx(23.2, 0.01) assert_float(23.22).is_equal_approx(23.2, 0.01) . | public static IDoubleAssert AssertFloat(&lt;current&gt;).IsEqualApprox(&lt;expected&gt;, &lt;approx&gt;) . // this assertion succeeds AssertFloat(23.19).IsEqualApprox(23.2, 0.01); AssertFloat(23.20).IsEqualApprox(23.2, 0.01); AssertFloat(23.21).IsEqualApprox(23.2, 0.01); // this assertion fails because 23.18 and 23.22 are not equal approximately to 23.2 +/- 0.01 AssertFloat(23.18).IsEqualApprox(23.2, 0.01); AssertFloat(23.22).IsEqualApprox(23.2, 0.01); . | . is_less . Verifies that the current value is less than the given one. | GdScript | C# | . | func assert_float(&lt;current&gt;).is_less(&lt;expected&gt;) -&gt; GdUnitFloatAssert . # this assertion succeeds assert_float(23.2).is_less(23.4) assert_float(23.2).is_less(26.0) # this assertion fails because 23.2 is not less than 23.2 assert_float(23.2).is_less(23.2) . | public static IDoubleAssert AssertFloat(&lt;current&gt;).IsLess(&lt;expected&gt;) . // this assertion succeeds AssertFloat(23.2).IsLess(23.4); AssertFloat(23.2).IsLess(26.0); // this assertion fails because 23.2 is not less than 23.2 AssertFloat(23.2).IsLess(23.2); . | . is_less_equal . Verifies that the current value is less than or equal the given one. | GdScript | C# | . | func assert_float(&lt;current&gt;).is_less_equal(&lt;expected&gt;) -&gt; GdUnitFloatAssert . # this assertion succeeds assert_float(23.2).is_less_equal(23.4) assert_float(23.2).is_less_equal(23.2) # this assertion fails because 23.2 is not less than or equal to 23.1 assert_float(23.2).is_less_equal(23.1) . | public static IDoubleAssert AssertFloat(&lt;current&gt;).IsLessEqual(&lt;expected&gt;) . // this assertion succeeds AssertFloat(23.2).IsLessEqual(23.4); AssertFloat(23.2).IsLessEqual(23.2); // this assertion fails because 23.2 is not less than or equal to 23.1 AssertFloat(23.2).IsLessEqual(23.1); . | . is_greater . Verifies that the current value is greater than the given one. | GdScript | C# | . | func assert_float(&lt;current&gt;).is_greater(&lt;expected&gt;) -&gt; GdUnitFloatAssert . # this assertion succeeds assert_float(23.2).is_greater(23.0) assert_float(23.4).is_greater(22.1) # this assertion fails because 23.2 is not greater than 23.2 assert_float(23.2).is_greater(23.2) . | public static IDoubleAssert AssertFloat(&lt;current&gt;).IsGreater(&lt;expected&gt;) . # this assertion succeeds AssertFloat(23.2).IsGreater(23.0) AssertFloat(23.4).IsGreater(22.1) # this assertion fails because 23.2 is not greater than 23.2 AssertFloat(23.2).IsGreater(23.2) . | . is_greater_equal . Verifies that the current value is greater than or equal the given one. | GdScript | C# | . | func assert_float(&lt;current&gt;).is_greater_equal(&lt;expected&gt;) -&gt; GdUnitFloatAssert . # this assertion succeeds assert_float(23.2).is_greater_equal(20.2) assert_float(23.2).is_greater_equal(23.2) # this assertion fails because 23.2 is not greater than 23.3 assert_float(23.2).is_greater_equal(23.3) . | public static IDoubleAssert AssertFloat(&lt;current&gt;).IsGreaterEqual(&lt;expected&gt;) . // this assertion succeeds AssertFloat(23.2).IsGreaterEqual(20.2); AssertFloat(23.2).IsGreaterEqual(23.2); // this assertion fails because 23.2 is not greater than 23.3 AssertFloat(23.2).IsGreaterEqual(23.3); . | . is_negative . Verifies that the current value is negative. | GdScript | C# | . | func assert_float(&lt;current&gt;).is_negative() -&gt; GdUnitFloatAssert . # this assertion succeeds assert_float(-13.2).is_negative() # this assertion fails because is not negative assert_float(13.2).is_negative() . | public static IDoubleAssert AssertFloat(&lt;current&gt;).IsNegative() . // this assertion succeeds AssertFloat(-13.2).IsNegative(); // this assertion fails because is not negative AssertFloat(13.2).IsNegative(); . | . is_not_negative . Verifies that the current value is not negative. | GdScript | C# | . | func assert_float(&lt;current&gt;).is_not_negative() -&gt; GdUnitFloatAssert . # this assertion succeeds assert_float(13.2).is_not_negative() # this assertion fails because is negative assert_float(-13.2).is_not_negative() . | public static IDoubleAssert AssertFloat(&lt;current&gt;).IsNotNegative() . // this assertion succeeds AssertFloat(13.2).IsNotNegative(); // this assertion fails because is negative AssertFloat(-13.2).IsNotNegative(); . | . is_zero . Verifies that the current value is equal to zero. | GdScript | C# | . | func assert_float(&lt;current&gt;).is_zero() -&gt; GdUnitFloatAssert . # this assertion succeeds assert_float(0.0).is_zero() # this assertion fail because the value is not zero assert_float(0.00001).is_zero() . | public static IDoubleAssert AssertFloat(&lt;current&gt;).IsZero() . // this assertion succeeds AssertFloat(0.0).IsZero(); // this assertion fail because the value is not zero AssertFloat(0.00001).IsZero(); . | . is_not_zero . Verifies that the current value is not equal to zero. | GdScript | C# | . | func assert_float(&lt;current&gt;).is_not_zero() -&gt; GdUnitFloatAssert . # this assertion succeeds assert_float(0.00001).is_not_zero() # this assertion fail because the value is not zero assert_float(0.000001).is_not_zero() . | public static IDoubleAssert AssertFloat(&lt;current&gt;).IsNotZero() . // this assertion succeeds AssertFloat(0.00001).IsNotZero(); // this assertion fail because the value is not zero AssertFloat(0.000001).IsNotZero(); . | . is_in . Verifies that the current value is in the given set of values. | GdScript | C# | . | func assert_float(&lt;current&gt;).is_in(&lt;expected&gt; :Array) -&gt; GdUnitFloatAssert . # this assertion succeeds assert_float(5.2).is_in([5.1, 5.2, 5.3, 5.4]) # this assertion fail because 5.5 is not in [5.1, 5.2, 5.3, 5.4] assert_float(5.5).is_in([5.1, 5.2, 5.3, 5.4]) . | public static IDoubleAssert AssertFloat(&lt;current&gt;).IsIn([]&lt;expected&gt;) . // this assertion succeeds AssertFloat(5.2).IsIn(5.1, 5.2, 5.3, 5.4); // this assertion fail because 5.5 is not in [5.1, 5.2, 5.3, 5.4] AssertFloat(5.5).IsIn(5.1, 5.2, 5.3, 5.4); . | . is_not_in . Verifies that the current value is not in the given set of values. | GdScript | C# | . | func assert_float(&lt;current&gt;).is_not_in(&lt;expected&gt; :Array) -&gt; GdUnitFloatAssert . # this assertion succeeds assert_float(5.2).is_not_in([5.1, 5.3, 5.4]) # this assertion fail because 5.2 is not in [5.1, 5.2, 5.3, 5.4] assert_float(5.2).is_not_in([5.1, 5.2, 5.3, 5.4]) . | public static IDoubleAssert AssertFloat(&lt;current&gt;).IsNotIn([]&lt;expected&gt;) . // this assertion succeeds AssertFloat(5.2).IsNotIn(5.1, 5.3, 5.4); // this assertion fail because 5.2 is not in [5.1, 5.2, 5.3, 5.4] AssertFloat(5.2).IsNotIn(5.1, 5.2, 5.3, 5.4); . | . is_between . Verifies that the current value is between the given boundaries (inclusive). | GdScript | C# | . | func assert_float(&lt;current&gt;).is_between(&lt;from&gt;, &lt;to&gt;) -&gt; GdUnitFloatAssert . # this assertion succeeds assert_float(-20.0).is_between(-20.0, 20.9) assert_float(10.0).is_between(-20.0, 20.9) assert_float(20.9).is_between(-20.0, 20.9) # this assertion fail because the value is -10.0 and not between -9 and 0 assert_float(-10.0).is_between(-9.0, 0.0) . | public static IDoubleAssert AssertFloat(&lt;current&gt;).IsBetween(&lt;from&gt;, &lt;to&gt;) . // this assertion succeeds AssertFloat(-20.0).IsBetween(-20.0, 20.9); AssertFloat(10.0).IsBetween(-20.0, 20.9); AssertFloat(20.9).IsBetween(-20.0, 20.9); // this assertion fail because the value is -10.0 and not between -9 and 0 AssertFloat(-10.0).IsBetween(-9.0, 0.0); . | . ",
    "url": "/gdUnit3/asserts/assert-float/#float-assert-examples",
    "relUrl": "/asserts/assert-float/#float-assert-examples"
  },"31": {
    "doc": "Float/Double Assert",
    "title": "Float/Double Assert",
    "content": " ",
    "url": "/gdUnit3/asserts/assert-float/",
    "relUrl": "/asserts/assert-float/"
  },"32": {
    "doc": "Function/Method Assert",
    "title": "!Deprecated!",
    "content": " ",
    "url": "/gdUnit3/asserts/assert-function/#deprecated",
    "relUrl": "/asserts/assert-function/#deprecated"
  },"33": {
    "doc": "Function/Method Assert",
    "title": "Function/Method Assertions",
    "content": "An assertion tool that waits until a certain time for an expected function return value. When the timeout is reached, the assertion fails with a timeout error. The default timeout of 2s can be overridden by wait_until() . | GdScript | C# | . | | Function | Description | . | is_null | Verifies that the current value is null. | . | is_not_null | Verifies that the current value is not null. | . | is_equal | Verifies that the current value is equal to expected one. | . | is_not_equal | Verifies that the current value is not equal to expected one. | . | is_true | Verifies that the current value is true. | . | is_false | Verifies that the current value is false. | . | wait_until | Sets the timeout in ms to wait the function returnd the expected value. | . | ",
    "url": "/gdUnit3/asserts/assert-function/#functionmethod-assertions",
    "relUrl": "/asserts/assert-function/#functionmethod-assertions"
  },"34": {
    "doc": "Function/Method Assert",
    "title": "Not supported!",
    "content": "| . ",
    "url": "/gdUnit3/asserts/assert-function/#not-supported",
    "relUrl": "/asserts/assert-function/#not-supported"
  },"35": {
    "doc": "Function/Method Assert",
    "title": "Function/Method Assert Examples",
    "content": "is_equal . Waits until the return value of the function is equal to the expected value until the wait time has expired. func assert_func(&lt;instance :Object&gt;, &lt;func_name :String&gt;, [args :Array]).is_equal(&lt;expected&gt;) -&gt; GdUnitAssert . # waits until get_count() returns 9 or fails after default timeout of 2s yield(assert_func(self, \"get_count\").is_equal(9.0), \"completed\") . is_not_equal . Waits until the return value of the function is NOT equal to the expected value until the wait time has expired. func assert_func(&lt;instance :Object&gt;, &lt;func_name :String&gt;, [args :Array]).is_not_equal(&lt;expected&gt;) -&gt; GdUnitAssert . # waits until get_state() returns different value than \"idle\" or fails after default timeout of 2s yield(assert_func(self, \"get_state\").is_not_equal(\"idle\"), \"completed\") . is_null . Waits until the return value of the function is NULL until the wait time has expired. func assert_func(&lt;instance :Object&gt;, &lt;func_name :String&gt;, [args :Array]).is_null() -&gt; GdUnitAssert . # waits until get_parent() returns NULL or fails after default timeout of 2s yield(assert_func(self, \"get_parent\").is_null(), \"completed\") . is_not_null . Waits until the return value of the function is NOT NULL until the wait time has expired. func assert_func(&lt;instance :Object&gt;, &lt;func_name :String&gt;, [args :Array]).is_not_null() -&gt; GdUnitAssert . # waits until get_parent() returns not NULL or fails after default timeout of 2s yield(assert_func(self, \"get_parent\").is_not_null(), \"completed\") . is_true . Waits until the return value of the function is true until the wait time has expired. func assert_func(&lt;instance :Object&gt;, &lt;func_name :String&gt;, [args :Array]).is_true() -&gt; GdUnitAssert . # waits until has_parent() returns true or fails after default timeout of 2s yield(assert_func(self, \"has_parent\").is_true(), \"completed\") . is_false . Waits until the return value of the function is false until the wait time has expired. func assert_func(&lt;instance :Object&gt;, &lt;func_name :String&gt;, [args :Array]).is_false() -&gt; GdUnitAssert . # waits until has_parent() returns false or fails after default timeout of 2s yield(assert_func(self, \"has_parent\").is_false(), \"completed\") . wait_until . Sets the timeout in ms to wait the function returnd the expected value, if the time over a failure is emitted . func assert_func(&lt;instance :Object&gt;, &lt;func_name :String&gt;, [args :Array]).wait_until(&lt;timeout&gt;) -&gt; GdUnitFuncAssert . # waits until has_parent() returns false or fails after custom timeout of 5s yield(assert_func(self, \"has_parent\").wait_until(5000).is_false(), \"completed\") . ",
    "url": "/gdUnit3/asserts/assert-function/#functionmethod-assert-examples",
    "relUrl": "/asserts/assert-function/#functionmethod-assert-examples"
  },"36": {
    "doc": "Function/Method Assert",
    "title": "Function/Method Assert",
    "content": " ",
    "url": "/gdUnit3/asserts/assert-function/",
    "relUrl": "/asserts/assert-function/"
  },"37": {
    "doc": "Integer Assert",
    "title": "Integer Assertions",
    "content": "An assertion tool to verify integer values. | GdScript | C# | . | | Function | Description | . | is_null | Verifies that the current value is null. | . | is_not_null | Verifies that the current value is not null. | . | is_equal | Verifies that the current value is equal to the given one. | . | is_not_equal | Verifies that the current value is not equal to the given one. | . | is_less | Verifies that the current value is less than the given one. | . | is_less_equal | Verifies that the current value is less than or equal the given one. | . | is_greater | Verifies that the current value is greater than the given one. | . | is_greater_equal | Verifies that the current value is greater than or equal the given one. | . | is_even | Verifies that the current value is even. | . | is_odd | Verifies that the current value is odd. | . | is_negative | Verifies that the current value is negative. | . | is_not_negative | Verifies that the current value is not negative. | . | is_zero | Verifies that the current value is equal to zero. | . | is_not_zero | Verifies that the current value is not equal to zero. | . | is_in | Verifies that the current value is in the given set of values. | . | is_not_in | Verifies that the current value is not in the given set of values. | . | is_between | Verifies that the current value is between the given boundaries (inclusive). | . | | Function | Description | . | IsNull | Verifies that the current value is null. | . | IsNotNull | Verifies that the current value is not null. | . | IsEqual | Verifies that the current value is equal to the given one. | . | IsNotEqual | Verifies that the current value is not equal to the given one. | . | IsLess | Verifies that the current value is less than the given one. | . | IsLessEqual | Verifies that the current value is less than or equal the given one. | . | IsGreater | Verifies that the current value is greater than the given one. | . | IsGreaterEqual | Verifies that the current value is greater than or equal the given one. | . | IsEven | Verifies that the current value is even. | . | IsOdd | Verifies that the current value is odd. | . | IsNegative | Verifies that the current value is negative. | . | IsNotNegative | Verifies that the current value is not negative. | . | IsZero | Verifies that the current value is equal to zero. | . | IsNotZero | Verifies that the current value is not equal to zero. | . | IsIn | Verifies that the current value is in the given set of values. | . | IsNotIn | Verifies that the current value is not in the given set of values. | . | IsBetween | Verifies that the current value is between the given boundaries (inclusive). | . | . ",
    "url": "/gdUnit3/asserts/assert-integer/#integer-assertions",
    "relUrl": "/asserts/assert-integer/#integer-assertions"
  },"38": {
    "doc": "Integer Assert",
    "title": "Integer Assert Examples",
    "content": "is_equal . Verifies that the current value is equal to the given one. | GdScript | C# | . | func assert_int(&lt;current&gt;).is_equal(&lt;expected&gt;) -&gt; GdUnitIntAssert . # this assertion succeeds assert_int(23).is_equal(23) # this assertion fails because 23 are not equal to 42 assert_int(23).is_equal(42) . | IIntAssert AssertInt(&lt;current&gt;).IsEqual(&lt;expected&gt;) . // this assertion succeeds AssertInt(23).IsEqual(23); // this assertion fails because 23 are not equal to 42 AssertInt(23).IsEqual(42); . | . is_not_equal . Verifies that the current value is not equal to the given one. | GdScript | C# | . | func assert_int(&lt;current&gt;).is_not_equal(&lt;expected&gt;) -&gt; GdUnitIntAssert . # this assertion succeeds assert_int(23).is_not_equal(42) # this assertion fails because 23 are equal to 23 assert_int(23).is_not_equal(23) . | IIntAssert AssertInt(&lt;current&gt;).IsNotEqual(&lt;expected&gt;) . // this assertion succeeds AssertInt(23).IsNotEqual(42); // this assertion fails because 23 are equal to 23 AssertInt(23).IsNotEqual(23); . | . is_less . Verifies that the current value is less than the given one. | GdScript | C# | . | func assert_int(&lt;current&gt;).is_less(&lt;expected&gt;) -&gt; GdUnitIntAssert . # this assertion succeeds assert_int(23).is_less(42) assert_int(23).is_less(24) # this assertion fails because 23 is not less than 23 assert_int(23).is_less(23) . | IIntAssert AssertInt(&lt;current&gt;).IsLess(&lt;expected&gt;) . // this assertion succeeds AssertInt(23).IsLess(42); AssertInt(23).IsLess(24); // this assertion fails because 23 is not less than 23 AssertInt(23).IsLess(23); . | . is_less_equal . Verifies that the current value is less than or equal the given one. | GdScript | C# | . | func assert_int(&lt;current&gt;).is_less_equal(&lt;expected&gt;) -&gt; GdUnitIntAssert . # this assertion succeeds assert_int(23).is_less_equal(42) assert_int(23).is_less_equal(23) # this assertion fails because 23 is not less than or equal to 22 assert_int(23).is_less_equal(22) . | IIntAssert AssertInt(&lt;current&gt;).IsLessEqual(&lt;expected&gt;) . // this assertion succeeds AssertInt(23).IsLessEqual(42); AssertInt(23).IsLessEqual(23); // this assertion fails because 23 is not less than or equal to 22 AssertInt(23).IsLessEqual(22); . | . is_greater . Verifies that the current value is greater than the given one. | GdScript | C# | . | func assert_int(&lt;current&gt;).is_greater(&lt;expected&gt;) -&gt; GdUnitIntAssert . # this assertion succeeds assert_int(23).is_greater(20) assert_int(23).is_greater(22) # this assertion fails because 23 is not greater than 23 assert_int(23).is_greater(23) . | IIntAssert AssertInt(&lt;current&gt;).IsGreater(&lt;expected&gt;) . // this assertion succeeds AssertInt(23).IsGreater(20); AssertInt(23).IsGreater(22); // this assertion fails because 23 is not greater than 23 AssertInt(23).IsGreater(23); . | . is_greater_equal . Verifies that the current value is greater than or equal the given one. | GdScript | C# | . | func assert_int(&lt;current&gt;).is_greater_equal(&lt;expected&gt;) -&gt; GdUnitIntAssert . assert_int(23).is_greater_equal(20) assert_int(23).is_greater_equal(23) # this assertion fails because 23 is not greater than 23 assert_int(23).is_greater_equal(24) . | IIntAssert AssertInt(&lt;current&gt;).IsGreaterEqual(&lt;expected&gt;) . AssertInt(23).IsGreaterEqual(20) AssertInt(23).IsGreaterEqual(23) # this assertion fails because 23 is not greater than 23 AssertInt(23).IsGreaterEqual(24) . | . is_even . Verifies that the current value is even. | GdScript | C# | . | func assert_int(&lt;current&gt;).is_even() -&gt; GdUnitIntAssert . # this assertion succeeds assert_int(12).is_even() # this assertion fail because the value '13' is not even assert_int(13).is_even() . | IIntAssert AssertInt(&lt;current&gt;).IsEven() . // this assertion succeeds AssertInt(12).IsEven(); // this assertion fail because the value '13' is not even AssertInt(13).IsEven(); . | . is_odd . Verifies that the current value is odd. | GdScript | C# | . | func assert_int(&lt;current&gt;).is_odd() -&gt; GdUnitIntAssert . # this assertion succeeds assert_int(13).is_odd() # this assertion fail because the value '12' is even assert_int(12).is_odd() . | IIntAssert AssertInt(&lt;current&gt;).IsOdd() . // this assertion succeeds AssertInt(13).IsOdd(); // this assertion fail because the value '12' is even AssertInt(12).IsOdd(); . | . is_negative . Verifies that the current value is negative. | GdScript | C# | . | func assert_int(&lt;current&gt;).is_negative() -&gt; GdUnitIntAssert . # this assertion succeeds assert_int(-13).is_negative() # this assertion fail because the value '13' is positive assert_int(13).is_negative() . | IIntAssert AssertInt(&lt;current&gt;).IsNegative() . // this assertion succeeds AssertInt(-13).IsNegative(); // this assertion fail because the value '13' is positive AssertInt(13).IsNegative(); . | . is_not_negative . Verifies that the current value is not negative. | GdScript | C# | . | func assert_int(&lt;current&gt;).is_not_negative() -&gt; GdUnitIntAssert . # this assertion succeeds assert_int(13).is_not_negative() # this assertion fail because the value '-13' is negative assert_int(-13).is_not_negative() . | IIntAssert AssertInt(&lt;current&gt;).IsNotNegative() . // this assertion succeeds AssertInt(13).IsNotNegative(); // this assertion fail because the value '-13' is negative AssertInt(-13).IsNotNegative(); . | . is_zero . Verifies that the current value is equal to zero. | GdScript | C# | . | func assert_int(&lt;current&gt;).is_zero() -&gt; GdUnitIntAssert . # this assertion succeeds assert_int(0).is_zero() # this assertion fail because the value is not zero assert_int(1).is_zero() . | IIntAssert AssertInt(&lt;current&gt;).IsZero() . // this assertion succeeds AssertInt(0).IsZero(); // this assertion fail because the value is not zero AssertInt(1).IsZero(); . | . is_not_zero . Verifies that the current value is not equal to zero. | GdScript | C# | . | func assert_int(&lt;current&gt;).is_not_zero() -&gt; GdUnitIntAssert . # this assertion succeeds assert_int(1).is_not_zero() # this assertion fail because the value is zero assert_int(0).is_not_zero() . | IIntAssert AssertInt(&lt;current&gt;).IsNotZero() . // this assertion succeeds AssertInt(1).IsNotZero(); // this assertion fail because the value is zero AssertInt(0).IsNotZero(); . | . is_in . Verifies that the current value is in the given set of values. | GdScript | C# | . | func assert_int(&lt;current&gt;).is_in(&lt;expected&gt; :Array) -&gt; GdUnitIntAssert . # this assertion succeeds assert_int(5).is_in([3, 4, 5, 6]) # this assertion fail because 7 is not in [3, 4, 5, 6] assert_int(7).is_in([3, 4, 5, 6]) . | IIntAssert AssertInt(&lt;current&gt;).IsIn([] &lt;expected&gt;) . // this assertion succeeds AssertInt(5).IsIn(3, 4, 5, 6); // this assertion fail because 7 is not in [3, 4, 5, 6] AssertInt(7).IsIn(3, 4, 5, 6); . | . is_not_in . Verifies that the current value is not in the given set of values. | GdScript | C# | . | func assert_int(&lt;current&gt;).is_not_in(&lt;expected&gt; :Array) -&gt; GdUnitIntAssert . # this assertion succeeds assert_int(5).is_not_in([3, 4, 6, 7]) # this assertion fail because 5 is in [3, 4, 5, 6] assert_int(5).is_not_in([3, 4, 5, 6]) . | IIntAssert AssertInt(&lt;current&gt;).IsNotIn([] &lt;expected&gt;) . // this assertion succeeds AssertInt(5).IsNotIn(3, 4, 6, 7); // this assertion fail because 5 is in [3, 4, 5, 6] AssertInt(5).IsNotIn(3, 4, 5, 6); . | . is_between . Verifies that the current value is between the given boundaries (inclusive). | GdScript | C# | . | func assert_int(&lt;current&gt;).is_between(&lt;from&gt;, &lt;to&gt;) -&gt; GdUnitIntAssert . # this assertion succeeds assert_int(23).is_between(20, 30) assert_int(23).is_between(23, 24) # this assertion fail because the value is zero and not between 1 and 9 assert_int(0).is_between(1, 9) . | IIntAssert AssertInt(&lt;current&gt;).IsBetween(&lt;from&gt;, &lt;to&gt;) . // this assertion succeeds AssertInt(23).IsBetween(20, 30); AssertInt(23).IsBetween(23, 24); // this assertion fail because the value is zero and not between 1 and 9 AssertInt(0).IsBetween(1, 9); . | . ",
    "url": "/gdUnit3/asserts/assert-integer/#integer-assert-examples",
    "relUrl": "/asserts/assert-integer/#integer-assert-examples"
  },"39": {
    "doc": "Integer Assert",
    "title": "Integer Assert",
    "content": " ",
    "url": "/gdUnit3/asserts/assert-integer/",
    "relUrl": "/asserts/assert-integer/"
  },"40": {
    "doc": "Object Assert",
    "title": "Object Assertions",
    "content": "An assertion tool to verify Objects. | GdScript | C# | . | | Function | Description | . | is_null | Verifies that the current value is null. | . | is_not_null | Verifies that the current value is not null. | . | is_equal | Verifies that the current value is equal to expected one. | . | is_not_equal | Verifies that the current value is not equal to expected one. | . | is_same | Verifies that the current value is the same as the given one. | . | is_not_same | Verifies that the current value is not the same as the given one. | . | is_instanceof | Verifies that the current value is an instance of the given type. | . | is_not_instanceof | Verifies that the current value is not an instance of the given type. | . | | Function | Description | . | IsNull | Verifies that the current value is null. | . | IsNotNull | Verifies that the current value is not null. | . | IsEqual | Verifies that the current value is equal to expected one. | . | IsNotRqual | Verifies that the current value is not equal to expected one. | . | IsSame | Verifies that the current value is the same as the given one. | . | IsNotSame | Verifies that the current value is not the same as the given one. | . | IsInstanceOf | Verifies that the current value is an instance of the given type. | . | IsNotInstanceOf | Verifies that the current value is not an instance of the given type. | . | . ",
    "url": "/gdUnit3/asserts/assert-object/#object-assertions",
    "relUrl": "/asserts/assert-object/#object-assertions"
  },"41": {
    "doc": "Object Assert",
    "title": "Object Assert Examples",
    "content": "is_equal . Verifies that the current value is equal to expected one. | GdScript | C# | . | func assert_object(&lt;current&gt;).is_equal(&lt;expected&gt;) -&gt; GdUnitObjectAssert . # this assertion succeeds assert_object(Mesh.new()).is_equal(Mesh.new()) # should fail because the current is an Mesh and we expect equal to a Skin assert_object(Mesh.new()).is_equal(Skin.new()) . | public static IObjectAssert AssertObject(&lt;current&gt;).IsEqual(&lt;expected&gt;); . // this assertion succeeds AssertObject(new Godot.Mesh()).IsEqual(new Godot.Mesh()); // should fail because the current is an Mesh and we expect equal to a Skin AssertObject(new Godot.Mesh()).IsEqual(new Godot.Skin()); . | . is_not_equal . Verifies that the current value is not equal to expected one. | GdScript | C# | . | func assert_object(&lt;current&gt;).is_not_equal(&lt;expected&gt;) -&gt; GdUnitObjectAssert . # this assertion succeeds assert_object(Mesh.new()).is_not_equal(Skin.new()) # should fail because the current is an Mesh and we expect not equal to a Mesh assert_object(Mesh.new()).is_not_equal(Mesh.new()) . | public static IObjectAssert AssertObject(&lt;current&gt;).IsNotEqual(&lt;expected&gt;); . // this assertion succeeds AssertObject(new Godot.Mesh()).IsNotEqual(new Godot.Skin()); // should fail because the current is an Mesh and we expect not equal to a Mesh AssertObject(new Godot.Mesh()).IsNotEqual(new Godot.Mesh()); . | . is_null . Verifies that the current value is null. | GdScript | C# | . | func assert_object(&lt;current&gt;).is_null() -&gt; GdUnitObjectAssert . # this assertion succeeds assert_object(null).is_null() # should fail because it the current value is an Mesh and not null assert_object(Mesh.new()).is_null() . | public static IObjectAssert AssertObject(&lt;current&gt;).IsNull(); . // this assertion succeeds AssertObject(null).IsNull(); // should fail because it the current value is an Mesh and not null AssertObject(new Godot.Mesh()).IsNull(); . | . is_not_null . Verifies that the current value is not null. | GdScript | C# | . | func assert_object(&lt;current&gt;).is_not_null() -&gt; GdUnitObjectAssert . # this assertion succeeds assert_object(Mesh.new()).is_not_null() # should fail because the current value is null assert_object(null).is_not_null() . | public static IObjectAssert AssertObject(&lt;current&gt;).IsNotNull(); . // this assertion succeeds AssertObject(new Godot.Mesh()).IsNotNull(); // should fail because the current value is null AssertObject(null).IsNotNull(); . | . is_same . Verifies that the current value is the same as the given one. | GdScript | C# | . | func assert_object(&lt;current&gt;).is_same(&lt;expected&gt;) -&gt; GdUnitObjectAssert . # this assertion succeeds var obj1 = Node.new() var obj2 = obj1 var obj3 = obj1.duplicate() assert_object(obj1).is_same(obj1) assert_object(obj1).is_same(obj2) assert_object(obj2).is_same(obj1) # should fail because because the current is not same instance as expected value assert_object(null).is_same(obj1) assert_object(obj1).is_same(obj3) assert_object(obj3).is_same(obj1) assert_object(obj3).is_same(obj2) . | public static IObjectAssert AssertObject(&lt;current&gt;).IsSame(); . // this assertion succeeds var obj1 = new Godot.Node(); var obj2 = obj1; var obj3 = obj1.Duplicate(); AssertObject(obj1).IsSame(obj1); AssertObject(obj1).IsSame(obj2); AssertObject(obj2).IsSame(obj1); // should fail because because the current is not same instance as expected value AssertObject(null).IsSame(obj1); AssertObject(obj1).IsSame(obj3); AssertObject(obj3).IsSame(obj1); AssertObject(obj3).IsSame(obj2); . | . is_not_same . Verifies that the current value is not the same as the given one. | GdScript | C# | . | func assert_object(&lt;current&gt;).is_not_same(&lt;expected&gt;) -&gt; GdUnitObjectAssert . # this assertion succeeds var obj1 = Node.new() var obj2 = obj1 var obj3 = obj1.duplicate() assert_object(null).is_not_same(obj1) assert_object(obj1).is_not_same(obj3) assert_object(obj3).is_not_same(obj1) assert_object(obj3).is_not_same(obj2) # should fail because because the current is the same instance as expected value assert_object(obj1).is_not_same(obj1) assert_object(obj1).is_not_same(obj2) assert_object(obj2).is_not_same(obj1) . | public static IObjectAssert AssertObject(&lt;current&gt;).IsNotSame(); . // this assertion succeeds var obj1 = new Godot.Node(); var obj2 = obj1; var obj3 = obj1.Duplicate(); AssertObject(null).IsNotSame(obj1); AssertObject(obj1).IsNotSame(obj3); AssertObject(obj3).IsNotSame(obj1); AssertObject(obj3).IsNotSame(obj2); // should fail because because the current is the same instance as expected value AssertObject(obj1).IsNotSame(obj1) AssertObject(obj1).IsNotSame(obj2) AssertObject(obj2).IsNotSame(obj1) . | . is_instanceof . Verifies that the current value is an instance of the given type. | GdScript | C# | . | func assert_object(&lt;current&gt;).is_instanceof(&lt;expected&gt;) -&gt; GdUnitObjectAssert . # this assertion succeeds assert_object(Path.new()).is_instanceof(Node) # should fail because the current is not a instance of class Tree assert_object(Path.new()).is_instanceof(Tree) . | public static IObjectAssert AssertObject(&lt;current&gt;).IsInstanceOf&lt;Type&gt;(); . // this assertion succeeds AssertObject(new Godot.Path()).IsInstanceOf&lt;Node&gt;(); // should fail because the current is not a instance of class Tree AssertObject(new Godot.Path()).IsInstanceOf&lt;Tree&gt;(); . | . is_not_instanceof . Verifies that the current value is not an instance of the given type. | GdScript | C# | . | func assert_object(&lt;current&gt;).is_not_instanceof(&lt;expected&gt;) -&gt; GdUnitObjectAssert . # this assertion succeeds assert_object(Path.new()).is_not_instanceof(Tree) # should fail because Path is a instance of class Node (Path &lt; Spatial &lt; Node &lt; Object) assert_object(Path.new()).is_not_instanceof(Node) . | public static IObjectAssert AssertObject(&lt;current&gt;).IsNotInstanceOf&lt;Type&gt;(); . // this assertion succeeds AssertObject(new Godot.Path()).IsNotInstanceOf&lt;Tree&gt;(); // should fail because Path is a instance of class Node (Path &lt; Spatial &lt; Node &lt; Object) AssertObject(new Godot.Path()).IsNotInstanceOf&lt;Node&gt;(); . | . ",
    "url": "/gdUnit3/asserts/assert-object/#object-assert-examples",
    "relUrl": "/asserts/assert-object/#object-assert-examples"
  },"42": {
    "doc": "Object Assert",
    "title": "Object Assert",
    "content": " ",
    "url": "/gdUnit3/asserts/assert-object/",
    "relUrl": "/asserts/assert-object/"
  },"43": {
    "doc": "Signal Assert",
    "title": "Signal Assertions",
    "content": "An Assertion Tool to verify for emitted signals until a certain time. When the timeout is reached, the assertion fails with a timeout error. The default timeout of 2s can be overridden by wait_until() . | GdScript | C# | . | | Function | Description | . | is_emitted | Verifies that given signal is emitted until waiting time. | . | is_not_emitted | Verifies that given signal is NOT emitted until waiting time. | . | wait_until | Sets the assert signal timeout in ms. | . | ",
    "url": "/gdUnit3/asserts/assert-signal/#signal-assertions",
    "relUrl": "/asserts/assert-signal/#signal-assertions"
  },"44": {
    "doc": "Signal Assert",
    "title": "Not yet supported!",
    "content": "| . ",
    "url": "/gdUnit3/asserts/assert-signal/#not-yet-supported",
    "relUrl": "/asserts/assert-signal/#not-yet-supported"
  },"45": {
    "doc": "Signal Assert",
    "title": "Signal Assert Examples",
    "content": "is_emitted . Waits until the given signal is emitted or the timeout occures and fails . func assert_signal(&lt;instance :Object&gt;).is_emitted(&lt;signal_name&gt;, [args :Array]) -&gt; GdUnitSignalAssert . # waits until the signal \"door_opened\" is emitted by the instance or fails after default timeout of 2s yield(assert_signal(instance).is_emitted(\"door_opened\"), \"completed\") . is_not_emitted . Waits until the specified timeout to check if the signal was NOT emitted . func assert_signal(&lt;instance :Object&gt;).is_not_emitted(&lt;signal_name&gt;, [args :Array]) -&gt; GdUnitSignalAssert . # waits until 2s and verifies the signal \"door_locked\" is not emitted yield(assert_signal(instance).is_not_emitted(\"door_locked\"), \"completed\") . wait_until . Sets the timeout in ms to wait. func assert_signal(&lt;instance :Object&gt;).wait_until(&lt;timeout&gt;) -&gt; GdUnitSignalAssert . # waits until 5s the signal \"door_closed\" is emitted or fail yield(assert_signal(instance).wait_until(5000).is_emitted(\"door_closed\"), \"completed\") . ",
    "url": "/gdUnit3/asserts/assert-signal/#signal-assert-examples",
    "relUrl": "/asserts/assert-signal/#signal-assert-examples"
  },"46": {
    "doc": "Signal Assert",
    "title": "Signal Assert",
    "content": " ",
    "url": "/gdUnit3/asserts/assert-signal/",
    "relUrl": "/asserts/assert-signal/"
  },"47": {
    "doc": "String Assert",
    "title": "String Assertions",
    "content": "An assertion tool to verify String values. | GdScript | C# | . | | Function | Description | . | is_null | Verifies that the current value is null. | . | is_not_null | Verifies that the current value is not null. | . | is_equal | Verifies that the current String is equal to the given one. | . | is_equal_ignoring_case | Verifies that the current String is equal to the given one, ignoring case considerations. | . | is_not_equal | Verifies that the current String is not equal to the given one. | . | is_not_equal_ignoring_case | Verifies that the current String is not equal to the given one, ignoring case considerations. | . | is_empty | Verifies that the current String is empty, it has a length of 0. | . | is_not_empty | Verifies that the current String is not empty, it has a length of minimum 1. | . | contains | Verifies that the current String contains the given String. | . | contains_ignoring_case | Verifies that the current String does not contain the given String, ignoring case considerations. | . | not_contains | Verifies that the current String does not contain the given String. | . | not_contains_ignoring_case | Verifies that the current String does not contain the given String, ignoring case considerations. | . | starts_with | Verifies that the current String starts with the given prefix. | . | ends_with | Verifies that the current String ends with the given suffix. | . | has_length | Verifies that the current String has the expected length by used comparator. | . | | Function | Description | . | IsNull | Verifies that the current value is null. | . | IsNotNull | Verifies that the current value is not null. | . | IsEqual | Verifies that the current String is equal to the given one. | . | IsEqualIgnoringCase | Verifies that the current String is equal to the given one, ignoring case considerations. | . | IsNotEqual | Verifies that the current String is not equal to the given one. | . | IsNotEqualIgnoringCase | Verifies that the current String is not equal to the given one, ignoring case considerations. | . | IsEmpty | Verifies that the current String is empty, it has a length of 0. | . | IsNotEmpty | Verifies that the current String is not empty, it has a length of minimum 1. | . | Contains | Verifies that the current String contains the given String. | . | ContainsIgnoringCase | Verifies that the current String does not contain the given String, ignoring case considerations. | . | NotContains | Verifies that the current String does not contain the given String. | . | NotContainsIgnoringCase | Verifies that the current String does not contain the given String, ignoring case considerations. | . | StartsWith | Verifies that the current String starts with the given prefix. | . | EndsWith | Verifies that the current String ends with the given suffix. | . | HasLength | Verifies that the current String has the expected length by used comparator. | . | . ",
    "url": "/gdUnit3/asserts/assert-string/#string-assertions",
    "relUrl": "/asserts/assert-string/#string-assertions"
  },"48": {
    "doc": "String Assert",
    "title": "String Assert Examples",
    "content": "is_equal . Verifies that the current String is equal to the given one. | GdScript | C# | . | func assert_str(&lt;current&gt;).is_equal(&lt;expected&gt;) -&gt; GdUnitStringAssert . # this assertion succeeds assert_str(\"This is a test message\").is_equal(\"This is a test message\") # this assertion fails because the 'Message' is writen camel case assert_str(\"This is a test message\").is_equal(\"This is a test Message\") . | public static IStringAssert AssertString(&lt;current&gt;).IsEqual(&lt;expected&gt;) . // this assertion succeeds AssertString(\"This is a test message\").IsEqual(\"This is a test message\"); // this assertion fails because the 'Message' is writen camel case AssertString(\"This is a test message\").IsEqual(\"This is a test Message\"); . | . is_equal_ignoring_case . Verifies that the current String is equal to the given one, ignoring case considerations. | GdScript | C# | . | func assert_str(&lt;current&gt;).is_equal_ignoring_case(&lt;expected&gt;) -&gt; GdUnitStringAssert . # this assertion succeeds assert_str(\"This is a test message\").is_equal_ignoring_case(\"This is a test Message\") # this assertion fails because 'test' is missing assert_str(\"This is a test message\").is_equal_ignoring_case(\"This is a Message\") . | public static IStringAssert AssertString(&lt;current&gt;).IsEqualIgnoringCase(&lt;expected&gt;) . // this assertion succeeds AssertString(\"This is a test message\").IsEqualIgnoringCase(\"This is a test Message\") // this assertion fails because 'test' is missing AssertString(\"This is a test message\").IsEqualIgnoringCase(\"This is a Message\") . | . is_not_equal . Verifies that the current String is not equal to the given one. | GdScript | C# | . | func assert_str(&lt;current&gt;).is_not_equal(&lt;expected&gt;) -&gt; GdUnitStringAssert . # this assertion succeeds assert_str(\"This is a test message\").is_not_equal(\"This is a test Message\") # this assertion fails because the values are equal assert_str(\"This is a test message\").is_not_equal(\"This is a test message\") . | public static IStringAssert AssertString(&lt;current&gt;).IsNotEqual(&lt;expected&gt;) . // this assertion succeeds AssertString(\"This is a test message\").IsNotEqual(\"This is a test Message\"); // this assertion fails because the values are equal AssertString(\"This is a test message\").IsNotEqual(\"This is a test message\"); . | . is_not_equal_ignoring_case . Verifies that the current String is not equal to the given one, ignoring case considerations. | GdScript | C# | . | func assert_str(&lt;current&gt;).is_not_equal_ignoring_case(&lt;expected&gt;) -&gt; GdUnitStringAssert . # this assertion succeeds assert_str(\"This is a test message\").is_not_equal_ignoring_case(\"This is a Message\") # this assertion fails because the values are equal ignoring camel case assert_str(\"This is a test message\").is_not_equal_ignoring_case(\"This is a test Message\") . | public static IStringAssert AssertString(&lt;current&gt;).IsNotEqualIgnoringCase(&lt;expected&gt;) . // this assertion succeeds AssertString(\"This is a test message\").IsNotEqualIgnoringCase(\"This is a Message\"); // this assertion fails because the values are equal ignoring camel case AssertString(\"This is a test message\").IsNotEqualIgnoringCase(\"This is a test Message\"); . | . is_empty . Verifies that the current String is empty, it has a length of 0. | GdScript | C# | . | func assert_str(&lt;current&gt;).is_empty() -&gt; GdUnitStringAssert . # this assertion succeeds assert_str(\"\").is_empty() # this assertion fails because the values contains a single space assert_str(\" \").is_empty() . | public static IStringAssert AssertString(&lt;current&gt;).IsEmpty() . // this assertion succeeds AssertString(\"\").IsEmpty(); // this assertion fails because the values contains a single space AssertString(\" \").IsEmpty(); . | . is_not_empty . Verifies that the current String is not empty, it has a length of minimum 1. | GdScript | C# | . | func assert_str(&lt;current&gt;).is_not_empty() -&gt; GdUnitStringAssert . # this assertion succeeds assert_str(\" \").is_not_empty() # this assertion fails because the values empty (has size of 0 lenght) assert_str(\"\").is_not_empty() . | public static IStringAssert AssertString(&lt;current&gt;).IsNotEmpty() . // this assertion succeeds AssertString(\" \").IsNotEmpty(); // this assertion fails because the values empty (has size of 0 lenght) AssertString(\"\").IsNotEmpty(); . | . contains . Verifies that the current String contains the given String. | GdScript | C# | . | func assert_str(&lt;current&gt;).contains(&lt;expected&gt;) -&gt; GdUnitStringAssert . # this assertion succeeds assert_str(\"This is a String\").contains(\"is\") # this assertion fails assert_str(\"This is a String\").contains(\"not\") . | public static IStringAssert AssertString(&lt;current&gt;).Contains(&lt;expected&gt;) . // this assertion succeeds AssertString(\"This is a String\").Contains(\"is\"); // this assertion fails AssertString(\"This is a String\").Contains(\"not\"); . | . contains_ignoring_case . Verifies that the current String does not contain the given String, ignoring case considerations. | GdScript | C# | . | func assert_str(&lt;current&gt;).contains_ignoring_case(&lt;expected&gt;) -&gt; GdUnitStringAssert . # this assertion succeeds assert_str(\"This is a String\").contains_ignoring_case(\"IS\") # this assertion fails assert_str(\"This is a String\").contains_ignoring_case(\"not\") . | public static IStringAssert AssertString(&lt;current&gt;).ContainsIgnoringCase(&lt;expected&gt;) . // this assertion succeeds AssertString(\"This is a String\").ContainsIgnoringCase(\"IS\"); // this assertion fails AssertString(\"This is a String\").ContainsIgnoringCase(\"not\"); . | . not_contains . Verifies that the current String does not contain the given String. | GdScript | C# | . | func assert_str(&lt;current&gt;).not_contains(&lt;expected&gt;) -&gt; GdUnitStringAssert . # this assertion succeeds assert_str(\"This is a String\").not_contains(\"not\") # this assertion fails assert_str(\"This is a String\").not_contains(\"is\") . | public static IStringAssert AssertString(&lt;current&gt;).NotContains(&lt;expected&gt;) . // this assertion succeeds AssertString(\"This is a String\").NotContains(\"not\"); // this assertion fails AssertString(\"This is a String\").NotContains(\"is\"); . | . not_contains_ignoring_case . Verifies that the current String does not contain the given String, ignoring case considerations. | GdScript | C# | . | func assert_str(&lt;current&gt;).not_contains_ignoring_case(&lt;expected&gt;) -&gt; GdUnitStringAssert . # this assertion succeeds assert_str(\"This is a String\").not_contains_ignoring_case(\"Not\") # this assertion fails assert_str(\"This is a String\").not_contains_ignoring_case(\"IS\") . | public static IStringAssert AssertString(&lt;current&gt;).NotContainsIgnoringCase(&lt;expected&gt;) . // this assertion succeeds AssertString(\"This is a String\").NotContainsIgnoringCase(\"Not\"); // this assertion fails AssertString(\"This is a String\").NotContainsIgnoringCase(\"IS\"); . | . starts_with . Verifies that the current String starts with the given prefix. | GdScript | C# | . | func assert_str(&lt;current&gt;).starts_with(&lt;expected&gt;) -&gt; GdUnitStringAssert . # this assertion succeeds assert_str(\"This is a String\").starts_with(\"This is\") # this assertion fails assert_str(\"This is a String\").starts_with(\"a String\") . | public static IStringAssert AssertString(&lt;current&gt;).StartsWith(&lt;expected&gt;) . // this assertion succeeds AssertString(\"This is a String\").StartsWith(\"This is\"); // this assertion fails AssertString(\"This is a String\").StartsWith(\"a String\"); . | . ends_with . Verifies that the current String ends with the given suffix. | GdScript | C# | . | func assert_str(&lt;current&gt;).ends_with(&lt;expected&gt;) -&gt; GdUnitStringAssert . # this assertion succeeds assert_str(\"This is a String\").ends_with(\"a String\") # this assertion fails assert_str(\"This is a String\").ends_with(\"a Str\") . | public static IStringAssert AssertString(&lt;current&gt;).EndsWith(&lt;expected&gt;) . // this assertion succeeds AssertString(\"This is a String\").EndsWith(\"a String\"); // this assertion fails AssertString(\"This is a String\").EndsWith(\"a Str\"); . | . has_length . Verifies that the current String has the expected length by used [[comparator|Asserts#GdUnit Comparator]]. | GdScript | C# | . | func assert_str(&lt;current&gt;).has_length(&lt;expected&gt;, &lt;comparator&gt; (EXACTLY)) -&gt; GdUnitStringAssert . # this assertion succeeds because the current String has 22 characters assert_str(\"This is a test message\").has_length(22) assert_str(\"This is a test message\").has_length(23, Comparator.LESS_THAN) assert_str(\"This is a test message\").has_length(22, Comparator.LESS_EQUAL) assert_str(\"This is a test message\").has_length(21, Comparator.GREATER_THAN) assert_str(\"This is a test message\").has_length(21, Comparator.GREATER_EQUAL) # this assertion fails because the current String has 22 characters and not 23 assert_str(\"This is a test message\").has_length(23) assert_str(\"This is a test message\").has_length(22, Comparator.LESS_THAN) assert_str(\"This is a test message\").has_length(21, Comparator.LESS_EQUAL) assert_str(\"This is a test message\").has_length(22, Comparator.GREATER_THAN) assert_str(\"This is a test message\").has_length(23, Comparator.GREATER_EQUAL) . | public static IStringAssert AssertString(&lt;current&gt;).HasLength(&lt;expected&gt;, &lt;comparator&gt; (// EQUAL is default)) . // this assertion succeeds because the current String has 22 characters AssertString(\"This is a test message\").HasLength(22); AssertString(\"This is a test message\").HasLength(23, Compare.LESS_THAN); AssertString(\"This is a test message\").HasLength(22, Compare.LESS_EQUAL); AssertString(\"This is a test message\").HasLength(21, Compare.GREATER_THAN); AssertString(\"This is a test message\").HasLength(21, Compare.GREATER_EQUAL); // this assertion fails because the current String has 22 characters and not 23 AssertString(\"This is a test message\").HasLength(23); AssertString(\"This is a test message\").HasLength(22, Compare.LESS_THAN); AssertString(\"This is a test message\").HasLength(21, Compare.LESS_EQUAL); AssertString(\"This is a test message\").HasLength(22, Compare.GREATER_THAN); AssertString(\"This is a test message\").HasLength(23, Compare.GREATER_EQUAL); . | . ",
    "url": "/gdUnit3/asserts/assert-string/#string-assert-examples",
    "relUrl": "/asserts/assert-string/#string-assert-examples"
  },"49": {
    "doc": "String Assert",
    "title": "String Assert",
    "content": " ",
    "url": "/gdUnit3/asserts/assert-string/",
    "relUrl": "/asserts/assert-string/"
  },"50": {
    "doc": "AssertThat",
    "title": "AssertThat Assertions",
    "content": "The assert_that is useful when you don’t know the type of the value you want to test. You can use this assertion on all types you want, but for better readability of the test (GdScript) I prefer to use type store asserts. For C# you should prefer to use AssertThat, under C# the type of a variable is always known therefore it allows to find the right assert. ",
    "url": "/gdUnit3/asserts/assert-that/#assertthat-assertions",
    "relUrl": "/asserts/assert-that/#assertthat-assertions"
  },"51": {
    "doc": "AssertThat",
    "title": "AssertThat Assert Examples",
    "content": ". | GdScript | C# | . | func assert_that(&lt;current&gt;) . # using type save asserts assert_str(\"This is a test message\").is_equal(\"This is a test message\") assert_int(23).is_greater(20) # can optional replaced by assert_that(\"This is a test message\").is_equal(\"This is a test message\") assert_that(23).is_greater(20) . | // auto type assertion public static IAssertBase&lt;Type&gt; AssertThat&lt;Type&gt;(&lt;current&gt;); . // using type save asserts AssertString(\"This is a test message\").IsEqual(\"This is a test message\"); AssertInt(23).IsGreater(20) // sould be replaced by AssertThat AssertThat(\"This is a test message\").is_equal(\"This is a test message\"); AssertThat(23).IsGreater(20); . | . ",
    "url": "/gdUnit3/asserts/assert-that/#assertthat-assert-examples",
    "relUrl": "/asserts/assert-that/#assertthat-assert-examples"
  },"52": {
    "doc": "AssertThat",
    "title": "AssertThat",
    "content": " ",
    "url": "/gdUnit3/asserts/assert-that/",
    "relUrl": "/asserts/assert-that/"
  },"53": {
    "doc": "Vector2 Assert",
    "title": "Vector2 Assertions",
    "content": "An assertion tool to verify Vector2 values. | GdScript | C# | . | | Function | Description | . | is_null | Verifies that the current value is null. | . | is_not_null | Verifies that the current value is not null. | . | is_equal | Verifies that the current value is equal to the given one. | . | is_not_equal | Verifies that the current value is not equal to the given one. | . | is_equal_approx | Verifies that the current and expected value are approximately equal. | . | is_less | Verifies that the current value is less than the given one. | . | is_less_equal | Verifies that the current value is less than or equal the given one. | . | is_greater | Verifies that the current value is greater than the given one. | . | is_greater_equal | Verifies that the current value is greater than or equal the given one. | . | is_between | Verifies that the current value is between the given boundaries (inclusive). | . | is_not_between | Verifies that the current value is not between the given boundaries (inclusive). | . | Not Yet Implemented! . | Function | Description | . | IsNull | Verifies that the current value is null. | . | IsNotNull | Verifies that the current value is not null. | . | IsEqual | Verifies that the current value is equal to the given one. | . | IsNotEqual | Verifies that the current value is not equal to the given one. | . | IsEqualApprox | Verifies that the current and expected value are approximately equal. | . | IsLess | Verifies that the current value is less than the given one. | . | IsLessEqual | Verifies that the current value is less than or equal the given one. | . | IsGreater | Verifies that the current value is greater than the given one. | . | IsGreaterEqual | Verifies that the current value is greater than or equal the given one. | . | IsBetween | Verifies that the current value is between the given boundaries (inclusive). | . | IsNotBetween | Verifies that the current value is not between the given boundaries (inclusive). | . | . ",
    "url": "/gdUnit3/asserts/assert-vector2/#vector2-assertions",
    "relUrl": "/asserts/assert-vector2/#vector2-assertions"
  },"54": {
    "doc": "Vector2 Assert",
    "title": "Vector2 Assert Examples",
    "content": "is_equal . Verifies that the current value is equal to the given one. | GdScript | . | func assert_vector2(&lt;current&gt;).is_equal(&lt;expected&gt;) -&gt; GdUnitVector2Assert . # this assertion succeeds assert_vector2(Vector2(1.1, 1.2)).is_equal(Vector2(1.1, 1.2)) # this assertion fails because part y of the vector 1.2 are not equal to 1.3 assert_vector2(Vector2(1.1, 1.2)).is_equal(Vector2(1.1, 1.3)) . | . is_not_equal . Verifies that the current value is not equal to the given one. | GdScript | . | func assert_vector2(&lt;current&gt;).is_not_equal(&lt;expected&gt;) -&gt; GdUnitVector2Assert . # this assertion succeeds assert_vector2(Vector2(1.1, 1.2)).is_not_equal(Vector2(1.1, 1.3)) # this assertion fails because both vectors are equal assert_vector2(Vector2(1.1, 1.2)).is_not_equal(Vector2(1.1, 1.2)) . | . is_equal_approx . Verifies that the current and expected value are approximately equal. | GdScript | . | func assert_vector2(&lt;current&gt;).is_equal_approx(expected, approx) -&gt; GdUnitVector2Assert . # this assertion succeeds assert_vector2(Vector2(0.996, 0.996)).is_equal_approx(Vector2.ONE, Vector2(0.004, 0.004)) # this will fail because the vector is out of approximated range assert_vector2(Vector2(1.005, 1)).is_equal_approx(Vector2.ONE, Vector2(0.004, 0.004)) . | . is_less . Verifies that the current value is less than the given one. | GdScript | . | func assert_vector2(&lt;current&gt;).is_less(&lt;expected&gt;) -&gt; GdUnitVector2Assert . # this assertion succeeds assert_vector2(Vector2.ZERO.is_less(Vector2.ONE) assert_vector2(Vector2(1.1, 1.2)).is_less(Vector2(1.1, 1.3)) # this assertion fails because both vectors are equal assert_vector2(Vector2(1.1, 1.2)).is_less(Vector2(1.1, 1.2)) . | . is_less_equal . Verifies that the current value is less than or equal the given one. | GdScript | . | func assert_vector2(&lt;current&gt;).is_less_equal(&lt;expected&gt;) -&gt; GdUnitVector2Assert . # this assertion succeeds assert_vector2(Vector2(1.1, 1.2)).is_less_equal(Vector2(1.1, 1.3)) assert_vector2(Vector2(1.1, 1.2)).is_less_equal(Vector2(1.1, 1.2)) # this assertion fails because part y 1.3 is not less or equal to 1.2 assert_vector2(Vector2(1.1, 1.3)).is_less_equal(Vector2(1.1, 1.2)) . | . is_greater . Verifies that the current value is greater than the given one. | GdScript | . | func assert_vector2(&lt;current&gt;).is_greater(&lt;expected&gt;) -&gt; GdUnitVector2Assert . # this assertion succeeds assert_vector2(Vector2(1.1, 1.3)).is_greater(Vector2(1.1, 1.2)) # this assertion fails because both vectors are equal assert_vector2(Vector2(1.1, 1.2)).is_greater(Vector2(1.1, 1.2)) . | . is_greater_equal . Verifies that the current value is greater than or equal the given one. | GdScript | . | func assert_vector2(&lt;current&gt;).is_greater_equal(&lt;expected&gt;) -&gt; GdUnitVector2Assert . # this assertion succeeds assert_vector2(Vector2(1.1, 1.3)).is_greater_equal(Vector2(1.1, 1.2)) assert_vector2(Vector2(1.1, 1.2)).is_greater_equal(Vector2(1.1, 1.2)) # this assertion fails because part y1.2 is less than 1.3 assert_vector2(Vector2(1.1, 1.2)).is_greater_equal(Vector2(1.1, 1.3)) . | . is_between . Verifies that the current value is between the given boundaries (inclusive). | GdScript | . | func assert_vector2(&lt;current&gt;).is_between(&lt;from&gt;, &lt;to&gt;) -&gt; GdUnitVector2Assert . # this assertion succeeds assert_vector2(Vector2(1.1, 1.2)).is_between(Vector2(1.1, 1.2), Vector2(1.1, 1.3)) assert_vector2(Vector2(1.1, 1.2)).is_between(Vector2(1.1, 1.1), Vector2(1.1, 1.3)) # this assertion fail because the part y 1.2 is not between 1.0 and 1.1 assert_vector2(Vector2(1.1, 1.2)).is_between (Vector2(1.1, 1.0), Vector2(1.1, 1.1)) . | . is_not_between . Verifies that the current value is not between the given boundaries (inclusive). | GdScript | . | func assert_vector2(&lt;current&gt;).is_not_between(&lt;from&gt;, &lt;to&gt;) -&gt; GdUnitVector2Assert . # this assertion succeeds assert_vector2(Vector2(1.0, 1.0)).is_not_between(Vector2(1.1, 1.0), Vector2(2.0, 1.0)) # this assertion fail because the vector is between assert_vector2(Vector2(1.0, 1.0)).is_not_between(Vector2(1.0, 1.0), Vector2(2.0, 1.0)) . | . ",
    "url": "/gdUnit3/asserts/assert-vector2/#vector2-assert-examples",
    "relUrl": "/asserts/assert-vector2/#vector2-assert-examples"
  },"55": {
    "doc": "Vector2 Assert",
    "title": "Vector2 Assert",
    "content": " ",
    "url": "/gdUnit3/asserts/assert-vector2/",
    "relUrl": "/asserts/assert-vector2/"
  },"56": {
    "doc": "Vector3 Assert",
    "title": "Vector3 Assertions",
    "content": "An assertion tool to verify Vector3 values. | GdScript | C# | . | | Function | Description | . | is_null | Verifies that the current value is null. | . | is_not_null | Verifies that the current value is not null. | . | is_equal | Verifies that the current value is equal to the given one. | . | is_not_equal | Verifies that the current value is not equal to the given one. | . | is_equal_approx | Verifies that the current and expected value are approximately equal. | . | is_less | Verifies that the current value is less than the given one. | . | is_less_equal | Verifies that the current value is less than or equal the given one. | . | is_greater | Verifies that the current value is greater than the given one. | . | is_greater_equal | Verifies that the current value is greater than or equal the given one. | . | is_between | Verifies that the current value is between the given boundaries (inclusive). | . | is_not_between | Verifies that the current value is not between the given boundaries (inclusive). | . | Not Yet Implemented! . | Function | Description | . | IsNull | Verifies that the current value is null. | . | IsNotNull | Verifies that the current value is not null. | . | IsEqual | Verifies that the current value is equal to the given one. | . | IsNotEqual | Verifies that the current value is not equal to the given one. | . | IsEqualApprox | Verifies that the current and expected value are approximately equal. | . | IsLess | Verifies that the current value is less than the given one. | . | IsLessEqual | Verifies that the current value is less than or equal the given one. | . | IsGreater | Verifies that the current value is greater than the given one. | . | IsGreaterEqual | Verifies that the current value is greater than or equal the given one. | . | IsBetween | Verifies that the current value is between the given boundaries (inclusive). | . | IsNotBetween | Verifies that the current value is not between the given boundaries (inclusive). | . | . ",
    "url": "/gdUnit3/asserts/assert-vector3/#vector3-assertions",
    "relUrl": "/asserts/assert-vector3/#vector3-assertions"
  },"57": {
    "doc": "Vector3 Assert",
    "title": "Vector3 Assert Examples",
    "content": "is_equal . Verifies that the current value is equal to the given one. | GdScript | . | func assert_vector3(&lt;current&gt;).is_equal(&lt;expected&gt;) -&gt; GdUnitVector3Assert . # this assertion succeeds assert_vector3(Vector3(1.1, 1.2, 1.0)).is_equal(Vector3(1.1, 1.2, 1.0)) # this assertion fails because part y of the vector 1.2 are not equal to 1.3 assert_vector3(Vector3(1.1, 1.2, 1.0)).is_equal(Vector3(1.1, 1.3, 1.0)) . | . is_not_equal . Verifies that the current value is not equal to the given one. | GdScript | . | func assert_vector3(&lt;current&gt;).is_not_equal(&lt;expected&gt;) -&gt; GdUnitVector3Assert . # this assertion succeeds assert_vector3(Vector3(1.1, 1.2, 1.0)).is_not_equal(Vector3(1.1, 1.3, 1.0)) # this assertion fails because both vectors are equal assert_vector3(Vector3(1.1, 1.2, 1.0)).is_not_equal(Vector3(1.1, 1.2, 1.0)) . | . is_equal_approx . Verifies that the current and expected value are approximately equal. | GdScript | . | func assert_vector3(&lt;current&gt;).is_equal_approx(expected, approx) -&gt; GdUnitVector3Assert . # this assertion succeeds assert_vector3(Vector3(0.996, 0.996, 0.996)).is_equal_approx(Vector3.ONE, Vector3(0.004, 0.004, 0.004)) # this will fail because the vector is out of approximated range assert_vector3(Vector3(1.005, 1, 1)).is_equal_approx(Vector3.ONE, Vector3(0.004, 0.004, 0.004)) . | . is_less . Verifies that the current value is less than the given one. | GdScript | . | func assert_vector3(&lt;current&gt;).is_less(&lt;expected&gt;) -&gt; GdUnitVector3Assert . # this assertion succeeds assert_vector3(Vector3.ZERO.is_less(Vector3.ONE) assert_vector3(Vector3(1.1, 1.2, 1.0)).is_less(Vector3(1.1, 1.3, 1.0)) # this assertion fails because both vectors are equal assert_vector3(Vector3(1.1, 1.2, 1.0)).is_less(Vector3(1.1, 1.2, 1.0)) . | . is_less_equal . Verifies that the current value is less than or equal the given one. | GdScript | . | func assert_vector3(&lt;current&gt;).is_less_equal(&lt;expected&gt;) -&gt; GdUnitVector3Assert . # this assertion succeeds assert_vector3(Vector3(1.1, 1.2, 1.0)).is_less_equal(Vector3(1.1, 1.3, 1.0)) assert_vector3(Vector3(1.1, 1.2, 1.0)).is_less_equal(Vector3(1.1, 1.2, 1.0)) # this assertion fails because part y 1.3 is not less or equal to 1.2 assert_vector3(Vector3(1.1, 1.3, 1.0)).is_less_equal(Vector3(1.1, 1.2, 1.0)) . | . is_greater . Verifies that the current value is greater than the given one. | GdScript | . | func assert_vector3(&lt;current&gt;).is_greater(&lt;expected&gt;) -&gt; GdUnitVector3Assert . # this assertion succeeds assert_vector3(Vector3(1.1, 1.3, 1.0)).is_greater(Vector3(1.1, 1.2, 1.0)) # this assertion fails because both vectors are equal assert_vector3(Vector3(1.1, 1.2, 1.0)).is_greater(Vector3(1.1, 1.2, 1.0)) . | . is_greater_equal . Verifies that the current value is greater than or equal the given one. | GdScript | . | func assert_vector3(&lt;current&gt;).is_greater_equal(&lt;expected&gt;) -&gt; GdUnitVector3Assert . # this assertion succeeds assert_vector3(Vector3(1.1, 1.3, 1.0)).is_greater_equal(Vector3(1.1, 1.2, 1.0)) assert_vector3(Vector3(1.1, 1.2, 1.0)).is_greater_equal(Vector3(1.1, 1.2, 1.0)) # this assertion fails because part y1.2 is less than 1.3 assert_vector3(Vector3(1.1, 1.2, 1.0)).is_greater_equal(Vector3(1.1, 1.3, 1.0)) . | . is_between . Verifies that the current value is between the given boundaries (inclusive). | GdScript | . | func assert_vector3(&lt;current&gt;).is_between(&lt;from&gt;, &lt;to&gt;) -&gt; GdUnitVector3Assert . # this assertion succeeds assert_vector3(Vector3(1.1, 1.2, 1.0)).is_between(Vector3(1.1, 1.2, 1.0), Vector3(1.1, 1.3, 1.0)) assert_vector3(Vector3(1.1, 1.2, 1.0)).is_between(Vector3(1.1, 1.1, 1.0), Vector3(1.1, 1.3, 1.0)) # this assertion fail because the part y 1.2 is not between 1.0 and 1.1 assert_vector3(Vector3(1.1, 1.2, 1.0)).is_between (Vector3(1.1, 1.0, 1.0), Vector3(1.1, 1.1, 1.0)) . | . is_not_between . Verifies that the current value is not between the given boundaries (inclusive). | GdScript | . | func assert_vector3(&lt;current&gt;).is_not_between(&lt;from&gt;, &lt;to&gt;) -&gt; GdUnitVector3Assert . # this assertion succeeds assert_vector3(Vector3(1.0, 1.0, 1.0)).is_not_between(Vector3(1.1, 1.2, 1.0), Vector3(2.0, 1.0, 1.0)) # this assertion fail because the vector is between assert_vector3(Vector3(1.0, 1.0, 1.0)).is_not_between(Vector3(1.0, 1.0, 1.0), Vector3(2.0, 1.0, 1.0)) . | . ",
    "url": "/gdUnit3/asserts/assert-vector3/#vector3-assert-examples",
    "relUrl": "/asserts/assert-vector3/#vector3-assert-examples"
  },"58": {
    "doc": "Vector3 Assert",
    "title": "Vector3 Assert",
    "content": " ",
    "url": "/gdUnit3/asserts/assert-vector3/",
    "relUrl": "/asserts/assert-vector3/"
  },"59": {
    "doc": "Asserts",
    "title": "Asserts",
    "content": "GdUnit3 is providing a set of assertions where give you helpful error messages and improves yor test code readability. Assertions are type organized and supports fluent syntax writing. The pattern for using asserts is defined as assert_&lt;type&gt;(&lt;current&gt;).&lt;comparison function&gt;([expected]). If you don’t know the type of the current value, use the generic assert_that(&lt;current&gt;) instead. On GdScript the asserts are included over GdUnitTestSuite for CSharpScripts you have to import by using static GdUnit3.Assertions; . | GdScript | C# | . | class_name GdUnitExampleTest extends GdUnitTestSuite func test_hello_world() -&gt; void: # using type save assert assert_str(\"Hello world\").is_equal(\"Hello world\") # using common assert assert_that(\"Hello world\").is_equal(\"Hello world\") . | using GdUnit3; using static GdUnit3.Assertions; [TestSuite] public class ExampleTest { [TestCase] public void HelloWorld() { // using type save assert AssertString(\"Hello world\").IsEqual(\"Hello world\"); // using common assert AssertThat(\"Hello world\").IsEqual(\"Hello world\"); } } . | . Using fluent syntax to write compact tests. | GdScript | C# | . | class_name GdUnitExampleTest extends GdUnitTestSuite # bad example of using many times `assert_str` func test_hello_world() -&gt; void: var current := \"Hello World\" assert_str(current).is_equal(\"Hello World\") assert_str(current).contains(\"World\") assert_str(current).not_contains(\"Green\") # example of using fluent syntax to write better readable tests func test_hello_world_fluent() -&gt; void: assert_str(\"Hello World\")\\ .is_equal(\"Hello World\")\\ .contains(\"World\")\\ .not_contains(\"Green\") . | using GdUnit3; using static GdUnit3.Assertions; [TestSuite] public class TestPersionTest { // bad example of using many times `AssertString` [TestCase] public void HelloWorld() { string current = \"Hello World\"; AssertString(current).IsEqual(\"Hello World\"); AssertString(current).Contains(\"World\"); AssertString(current).NotContains(\"Green\"); } // example of using fluent syntax to write better readable tests [TestCase] public void HelloWorldFluent() { AssertString(\"Hello World\") .IsEqual(\"Hello World\") .Contains(\"World\") .NotContains(\"Green\"); } } . | . Basic Build-In Type Asserts . | GdScript | C# | . | Assert | Type | . | assert_str | string | . | assert_bool | bool | . | assert_int | int | . | assert_float | float | . | | Assert | Type | . | AssertString | string | . | AssertBool | bool | . | AssertInt | int | . | AssertFloat | double | . | . For more details about Build-In types click here Godot Build-In Types . Container Built-In Type Asserts . | GdScript | C# | . | Assert | Type | . | assert_array | Array, PoolByteArray, PoolIntArray, PoolRealArray, PoolStringArray, PoolVector2Array, PoolVector3Array, PoolColorArray | . | assert_dict | Dictionary | . | | Assert | Type | . | AssertArray | IEnumerable | . | AssertDictionary | Dictionary | . | . For more details about Build-In types click here Container built-in types . Engine Build-In Type Asserts . | GdScript | C# | . | Type | Assert | . | assert_object | Object | . | assert_vector2 | Vector2 | . | assert_vector3 | Vector3 | . | assert_file | File | . | | Type | Assert | . | AssertObject | Godot.Object, System.object | . | AssertVector2 | Godot.Vector2 | . | AssertVector3 | Godot.Vector3 | . | AssertFile | File | . | . The Common Assert . | GdScript | C# | . | Assert | Type | . | assert_that | auto typing | . | | Assert | Type | . | AssertThat | auto typing | . | . Can be used for all types and gives you access to the basic test functions of GdUnit Assert. However, I recommend to always use the type-safe Assert for GdScripts, because GdScript is not type-safe. ",
    "url": "/gdUnit3/asserts/index/",
    "relUrl": "/asserts/index/"
  },"60": {
    "doc": "Argument Matchers",
    "title": "Argument Matchers",
    "content": " ",
    "url": "/gdUnit3/advanced_testing/argument_matchers/",
    "relUrl": "/advanced_testing/argument_matchers/"
  },"61": {
    "doc": "Argument Matchers",
    "title": "Argument Matchers is current only supported for GdScripts!",
    "content": ". ",
    "url": "/gdUnit3/advanced_testing/argument_matchers/#argument-matchers-is-current-only-supported-for-gdscripts",
    "relUrl": "/advanced_testing/argument_matchers/#argument-matchers-is-current-only-supported-for-gdscripts"
  },"62": {
    "doc": "Argument Matchers",
    "title": "Definition",
    "content": "An argument matcher is designed to help verify the behavior of a function call by a specified argument type on a mock or spy. That means we can test the call of a function without having to specify the exact argument value(s). Example . # we test if the function `set_message` is called two times with the argument `\"This is a test\"` verify(mock, 2).set_message(\"This is a test\") # If you only interested the function is called 2 times by any string # you can simplify by by using instead the argument machter `any_string()` verify(mock, 2).set_message(any_string()) . Argument Matcher . verify(&lt;mock&gt;, &lt;times&gt;).function(&lt;arg_matcher&gt;) verify(&lt;spy&gt;, &lt;times&gt;).function(&lt;arg_matcher&gt;) . GdUnit provides a set of argument matchers that allow you to check the behavior of function calls with an argument of a certain type. | Argument Matcher | Description | . | any | Argument matcher to match any argument | . | any_bool | Argument matcher to match any boolean value | . | any_int | Argument matcher to match any integer value | . | any_float | Argument matcher to match any float value | . | any_string | Argument matcher to match any string value | . | any_class | Argument matcher to match any instance of given class | . | any_color | Argument matcher to match any Color value | . | any_vector2 | Argument matcher to match any Vector2 value | . | any_vector3 | Argument matcher to match any Vector3 value | . | any_rect2 | Argument matcher to match any Rect2 value | . | any_plane | Argument matcher to match any Plane value | . | any_quat | Argument matcher to match any Quat value | . | any_aabb | Argument matcher to match any AABB value | . | any_basis | Argument matcher to match any Basis value | . | any_transform | Argument matcher to match any Transform value | . | any_transform_2d | Argument matcher to match any Transform2D value | . | any_node_path | Argument matcher to match any NodePath value | . | any_rid | Argument matcher to match any RID value | . | any_object | Argument matcher to match any Object value | . | any_dictionary | Argument matcher to match any Dictionary value | . | any_array | Argument matcher to match any Array value | . | any_pool_byte_array | Argument matcher to match any PoolByteArray value | . | any_pool_int_array | Argument matcher to match any PoolIntArray value | . | any_pool_float_array | Argument matcher to match any PoolRealArray value | . | any_pool_string_array | Argument matcher to match any PoolStringArray value | . | any_pool_vector2_array | Argument matcher to match any PoolVector2Array value | . | any_pool_vector3_array | Argument matcher to match any PoolVector3Array value | . | any_pool_color_array | Argument matcher to match any PoolColorArray value | . Build your own custom Argument Matcher . You can write your own argument matcher if necessary. You can do this by extend from class GdUnitArgumentMatcher and implement the is_match function. # base class of all argument matchers class_name GdUnitArgumentMatcher extends Reference # the fuction you have to override in your custom matcher func is_match(value) -&gt; bool: return true . Here is a simple example of how to write your own argument matcher. | Example Class | Custom Matcher | Example Test | . | class_name MyClass extends Reference var _value:int func set_value(value :int): _value = value . | We want to only accept values that greater than defined peek . class PeekMatcher extends GdUnitArgumentMatcher: var _peek :int func _init(peek :int): _peek = peek func is_match(value) -&gt; bool: return value &gt; _peek . | func test_custom_matcher(): var mocked_test_class :MyClass = mock(MyClass) mocked_test_class.set_value(1000) mocked_test_class.set_value(1001) mocked_test_class.set_value(1002) mocked_test_class.set_value(2002) # counts 1001, 1002, 2002 = 3 times verify(mocked_test_class, 3).set_value(PeekMatcher.new(1000)) # counts 2002 = 1 times verify(mocked_test_class, 1).set_value(PeekMatcher.new(2000)) . | . ",
    "url": "/gdUnit3/advanced_testing/argument_matchers/#definition",
    "relUrl": "/advanced_testing/argument_matchers/#definition"
  },"63": {
    "doc": "Command Line Tool",
    "title": "Command Line Tool",
    "content": "GdUnit3 Command Line Tool . GdUnit3 provides a tool that allows you to run a specific set of test suites and tests from the command line. The tool is named runtest.sh for linux/macos and runtest.cmd for windows and is located in the project folder and provides a set of commands. To get an overview of the available commands, execute it with the command -help. ---------------------------------------------------------------------------------------------- GdUnit3 Comandline Tool Usage: runtest -a &lt;directory|path of testsiute&gt; runtest -a &lt;directory&gt; -i &lt;path of testsuite|testsuite_name|testsuite_name:test_name&gt; -- Options --------------------------------------------------------------------------------------- [-help] Shows this help message. [--help-advanced] Shows advanced options. [-a, --add] Adds the given test suite or directory to the execution pipeline. -a &lt;directory|path of testsuite&gt; [-i, --ignore] Adds the given test suite or test case to the ignore list. -i &lt;testsuite_name|testsuite_name:test-name&gt; [-c, --continue] By default GdUnit will abort on first test failure to be fail fast, instead of stop after first failure you can use this option to run the complete test set. [-conf, --config] Run all tests by given test configuration. Default is 'GdUnitRunner.cfg' -conf [testconfiguration.cfg] . Preconditions to run on Windows 10 . | Setup test environment as follow . Add the environment variable GODOT_BIN by open a termial and enter the command. Replace the path D:\\develop\\Godot.exe with your own location where you have Godot installed. setx GODOT_BIN D:\\develop\\Godot.exe . | The GdUnit tool uses colored console output and needs to be enabled manually under Windows 10. Do it manually by open regedit: . The registry key at HKEY_CURRENT_USER\\Console\\VirtualTerminalLevel sets the global default behavior for processing ANSI escape sequences. Create a DWORD key (if necessary) and set its value to 1 to globally enable (or 0 to disable`) ANSI processing by default. Do this with the following command and open the terminal again: . REG ADD HKCU\\CONSOLE /f /v VirtualTerminalLevel /t REG_DWORD /d 1 . | . Now you can run your tests by runtest [cmd] . Preconditions to run on MacOS . | setup test environment as follow . Add the environment variable GODOT_BIN by open a termial and enter the command. Replace the path /Applications/Godot.app/Contents/MacOS/Godot with your own location where you have Godot installed. export GODOT_BIN=/Applications/Godot.app/Contents/MacOS/Godot . | . Now you can run your tests by ./runtest.sh [cmd] . How to use . Please note the requirements described above! . You can use the tool to run a complete test package or only a specific set of execution definitions or tests. # runs all testsiutes located under the directory '/myProject/test' testrun -a /myProject/test . You can specify one ore more directories for execution . # runs all testsiutes located under the directory /myProject/test/foo/bar1' and '/myProject/test/foo/bar3' testrun -a /myProject/test/foo/bar1 -a /myProject/test/foo/bar3 . Sometimes it may be necessary to skip (ignore) some test suites or tests from test execution. You can do this easily with the command ‘-i’. # runs all testsiutes located under the directory /myProject/test' exclusive all tests located under '/myProject/test/foo/bar3' testrun -a /myProject/test -i /myProject/test/foo/bar3 . You can also specify skipping by testsuite name and/or testcase name. # runs all testsiutes located under the directory /myProject/test' exclusive testsuite 'ClassATest' and 'ClassBTest:test_abc' testrun -a /myProject/test -i ClassATest -i ClassBTest:test_abc . You can also rerun the latest test execution (executed over the UI GdUnit-inspector) . # loads latest GdUnitRunner.cfg and runs the configured tests testrun -conf . # loads a specific test configuration and runs the configured tests (since v1.0.6) testrun -conf &lt;test_config.cfg&gt; . The report is stored by default under /reports. You can also change the default report directory invidually with the option -rd [directory]. By default, the last 20 reports are saved, older reports are automatically deleted. You can change the number with -rc [number]. See next section. Advanced Options . You can control the created reports by advanced options. [-rd, --report-directory] Specifies the output directory in which the reports are to be written. The default is res://reports/. -rd &lt;directory&gt; [-rc, --report-count] Specifies how many reports are saved before they are deleted. The default is 20. -rc &lt;count&gt; . To get an overview of all advaced options use --help-advanced. Return Codes . The tool ends with a certain return code, where you can check if the tests were completed successfully. 0 = all tests success 100 = ends with test failures 101 = ends with test warnings . The Report . The GdUnit command line tool generates a modern HTML and JUnit report with which you can quickly get an overview of the executed tests. You can find the reports in the report folder as: . | index.htm - the HTML report | results.xml - the JUnit report | . The HTML report . Report by Path . You can switch between the full list of executed test-suites or the view collected by paths. If you click on a test-suite you can view the report for a specific test-suite. Select a Testsuite Report . By further selecting the test cases, the test errors can be viewed in the “Failure Report” window. Logging . If logging is enabled in your project, the report saves the current log and can be viewed by clicking Logging. ",
    "url": "/gdUnit3/advanced_testing/cmd/",
    "relUrl": "/advanced_testing/cmd/"
  },"64": {
    "doc": "Fuzzing",
    "title": "Testing with Fuzzers",
    "content": " ",
    "url": "/gdUnit3/advanced_testing/fuzzing/#testing-with-fuzzers",
    "relUrl": "/advanced_testing/fuzzing/#testing-with-fuzzers"
  },"65": {
    "doc": "Fuzzing",
    "title": "Fuzzing is current only supported for GdScripts!",
    "content": "Definition . Fuzz Testing or Fuzzing is a software testing technique of putting invalid or random data called FUZZ into software system to discover coding errors and security loopholes. The purpose of fuzz testing is inserting data using automated or semi-automated techniques and testing the system for various exceptions like system crashing or failure of built-in code, etc. | GdScript | C# | . | func test_my_test(fuzzer := &lt;Fuzzer&gt;, &lt;fuzzer_iterations&gt;, &lt;fuzzer_seed&gt;): . | . | . Using Fuzzers . To use a fuzzer you only need to extend you test by the argument ‘fuzzer = '. | GdScript | C# | . | The fuzzer argument name must always start with a prefix fuzzer, allowed pattern is ['_', 'a-z', 'A_Z', '0-9']. func test_name(fuzzer := &lt;Fuzzer&gt;, &lt;fuzzer_iterations&gt;, &lt;fuzzer_seed&gt;): . | .. | . If your test is configured with an fuzzer argument it will be now iterate multiple times with an new value given by the fuzzer implementation. The default iteration is set to 1000 and can by configured by the optional argument ‘fuzzer_iterations’. If you want to have the same fuzzer results you can configure a seed by the optional argument ‘fuzzer_seed’ . func test_name(fuzzer := &lt;Fuzzer&gt;, &lt;fuzzer_iterations&gt;, &lt;fuzzer_seed&gt;): . Here an example to use a fuzzer where produces random values in a range from -23 to 22 and iterates 100 times . func test_fuzzer_inject_value(fuzzer := Fuzzers.random_rangei(-23, 22), fuzzer_iterations = 100): assert_int(fuzzer.next_value()).is_in_range(-23, 22) . multiple fuzzers are allowed . func test_fuzzer_inject_value(fuzzer_a := Fuzzers.random_rangei(-23, 22), fuzzer_b := Fuzzers.random_rangei(0, 42), fuzzer_iterations = 100): assert_int(fuzzer_a.next_value()).is_in_range(-23, 22) assert_int(fuzzer_b.next_value()).is_in_range(-23, 22) . Configure Fuzzer Iterations . If you want to iterate more than the default of 1000 iterations you can do this by set the amount of iteration by the ‘fuzzer_iterations’ argument. # execute this test 5000 times func test_fuzzer_inject_value(fuzzer := Fuzzers.random_rangei(-100000, 100000), fuzzer_iterations=5000): . Setting Fuzzer Seed . If you want to have always the same test results for a random generating fuzzer you can specifiy a seed by the ‘fuzzer_seed’ argument. # execute this test with a seed value of 123456 func test_fuzzer_inject_value(fuzzer := Fuzzers.random_rangei(-100000, 100000), fuzzer_seed=123456): . Fuzzers . For now GdUnit provides only this very small set of Fuzzer implementations and will be extend later! . | Fuzzer | Description | . | rangei(from, to) | Generates an random integer in a range form to | . | eveni(from, to) | Generates an integer in a range form to that can be divided exactly by 2 | . | oddi(from, to) | Generates an integer in a range form to that cannot be divided exactly by 2 | . | rangev2(from, to) | Generates an random Vector2 in a range form to | . | rangev3(from, to) | Generates an random Vector3 in a range form to | . | rand_str(min_length, max_length, charset) | Generates an random string value by a given min_length and max_length and specified charset | . Create Custom Fuzzer . If you need a custom fuzzer you do this by extend from class ‘Fuzzer’ and implement the function ‘next_value’ . # Base interface for fuzz testing # https://en.wikipedia.org/wiki/Fuzzing class_name Fuzzer extends Resource # generates the next fuzz value # needs to be implement func next_value(): push_error(\"Invalid vall. Fuzzer not implemented 'next_value()'\") return null . Here a small example custom fuzzer implementation . # a simple test fuzzer where provided a hard coded value set class TestFuzzer extends Fuzzer: var _data := [2, 3, 5, 7, 11, 13, 17, 19, 23, 29] func next_value(): return _data[randi_range(0, _data.size())] . ",
    "url": "/gdUnit3/advanced_testing/fuzzing/#fuzzing-is-current-only-supported-for-gdscripts",
    "relUrl": "/advanced_testing/fuzzing/#fuzzing-is-current-only-supported-for-gdscripts"
  },"66": {
    "doc": "Fuzzing",
    "title": "Fuzzing",
    "content": " ",
    "url": "/gdUnit3/advanced_testing/fuzzing/",
    "relUrl": "/advanced_testing/fuzzing/"
  },"67": {
    "doc": "Advanced Testing",
    "title": "Advanced Testing",
    "content": " ",
    "url": "/gdUnit3/advanced_testing/index/",
    "relUrl": "/advanced_testing/index/"
  },"68": {
    "doc": "Mocking",
    "title": "Mocking / Mocks",
    "content": " ",
    "url": "/gdUnit3/advanced_testing/mock/#mocking--mocks",
    "relUrl": "/advanced_testing/mock/#mocking--mocks"
  },"69": {
    "doc": "Mocking",
    "title": "Mocking is current only supported for GdScripts!",
    "content": "Definition . A mocked object is a dummy implementation for an class in which you define the output of certain function calls. Mocked objects are configured to perform a certain behavior during a test and tracks all function calls and their parameters to the mocked object. This kind of testing is sometimes called behavior testing. Behavior testing does not check the result of a function call, but it checks that a function is called with the right parameters. For detailed info about mocks you have to read . Here an small example to mock the class TestClass. | Example Class | Mock (RETURN_DEFAULTS) | Mock (CALL_REAL_FUNC) | . | class_name TestClass extends Node func message() -&gt; String: return \"a message\" . | func test_mock(): # create a mock for class 'TestClass' by mock mode `RETURN_DEFAULTS` (default) var mock := mock(TestClass) as TestClass # inital the mock will return a default value, for string means an empty string assert_str(mock.message()).is_empty() # new we override the return value for `message()` to return 'custom message' do_return(\"custom message\").on(mock).message() # the next call of `message()` will now return 'custom message' assert_str(mock.message()).is_equal(\"custom message\") . | func test_mock(): # create a mock for class 'TestClass' using mode `CALL_REAL_FUNC` var mock := mock(TestClass, CALL_REAL_FUNC) as TestClass # inital the mock will return a original value (calles the real implementation) assert_str(mock.message()).is_equal(\"a message\") # new we override the return value for `message()` to return 'custom message' do_return(\"custom message\").on(mock).message() # the next call of `message()` will now return 'custom message' assert_str(mock.message()).is_equal(\"custom message\") . | . How to use a Mock . To mock a class you only need to use mock(&lt;class_name&gt;) or mock(&lt;resource_path&gt;) to create a mocked object instance by given class name or path. A mocked instance is marked for auto free, you don’t need to free it manually. To enable creation a mock by class name you have to defined the class_name in your class otherwise the class must be mock by resource path. # example class class_name TestClass extends Node ... # create a mocked instance of by class 'TestClass' var mock := mock(TestClass) # or create by using the full resource path if no `class_name` defined var mock := mock(\"res://project_name/src/TestClass.gd\") . You can also mock inner classes by using mock(&lt;class_name&gt;) by some preconditions. How and Why we overwrite functions . With a mock you can override a specific function to return custom values. This allows you to simulate a function and return an expected value without calling the actual implementation. To override a function on your mocked class use do_return(&lt;value&gt;) to specify the return value. Syntax . do_return(&lt;value&gt;) .on(&lt;mock&gt;) .&lt;function([args])&gt;) . First you have to define the return value, then the mock and finally the function you want to override. var node := mock(Node) as Node do_return(\"NodeX\").on(node).get_name() . Example . # create a mock from class `Node` var mocked_node := mock(Node) as Node # is return 0 by default mocked_node.get_child_count() # override function `get_child_count` to return 10 do_return(10).on(mocked_node).get_child_count() # next call of `get_child_count` will now return 10 mocked_node.get_child_count() # is return 'null' by default var node = mocked_node.get_child(0) assert_object(node).is_null() # override function `get_child` to return a mocked 'Camera' for child index 0 do_return(mock(Camera)).on(mocked_node).get_child(0) # and a mocked 'Area' for child index 1 do_return(mock(Area)).on(mocked_node).get_child(1) # it returns now on indec 0 the Camera node var node0 = mocked_node.get_child(0) assert_object(node0).is_instanceof(Camera) # and on index 1 the Area node var node1 = mocked_node.get_child(1) assert_object(node1).is_instanceof(Area) . Verification of function calls . A mock keeps track of all the function calls and their arguments. Use verify() on the mock to verify that the specified conditions are met. This way you can check if a certain function is called and how often it was called. | Function | Description | . | verify | Verifies certain behavior happened at least once or exact number of times | . | verify_no_interactions | Verifies no interactions is happen on this mock | . | verify_no_more_interactions | Verifies the given mock has any unverified interaction | . | reset | Resets the saved function call counters on a mock | . verify_no_interactions . Verifies no interactions is happen on this mock. verify_no_interactions(&lt;mock&gt;) . var mocked_node := mock(Node) as Node # test we have initial no interactions on this mock verify_no_interactions(mocked_node) # interact by calling `get_name()` mocked_node.get_name() # now this verification will fail because we have interacted on this mock verify_no_interactions(mocked_node) . verify_no_more_interactions . Checks whether the specified mock has no further interaction. If the mock has recorded more interactions than you verified with verify(), an error is reported. verify_no_more_interactions(&lt;mock&gt;) . var mocked_node := mock(Node) as Node # interact on two functions mocked_node.is_a_parent_of(null) mocked_node.set_process(false) # verify if interacts verify(mocked_node).is_a_parent_of(null) verify(mocked_node).set_process(false) # finally we want to check no more interactions on this mock was happen verify_no_more_interactions(mocked_node) # simmulate a unexpected interaction on `set_process` mocked_node.set_process(false) # no the verify will fail because we have an interacted on `set_process(false)` where we not expected verify_no_more_interactions(mocked_node) . verify . Verifies certain behavior happened at least once or exact number of times . verify(&lt;mock&gt;, &lt;times&gt;).function(&lt;args&gt;) . var mocked_node :Node = mock(Node) # verify we have no interactions currently on this instance verify_no_interactions(mocked_node) # call with different arguments mocked_node.set_process(false) # 1 times mocked_node.set_process(true) # 1 times mocked_node.set_process(true) # 2 times # verify how often we called the function with different argument verify(mocked_node, 1).set_process(false)# in sum one time with false verify(mocked_node, 2).set_process(true) # in sum two times with true # verify will fail because we expect the function `set_process(true)` is called 3 times but was called 2 times verify(mocked_node, 3).set_process(true) . reset . Resets the recorded function interactions of given mock. Sometimes we want to reuse an already created mock for different test scenarios and have to reset the recorded interactions. reset(&lt;mock&gt;) . var mocked_node :Node = mock(Node) # first testing interact on two functions mocked_node.is_a_parent_of(null) mocked_node.set_process(false) # verify if interacts,at this point two interactions are recorded verify(mocked_node).is_a_parent_of(null) verify(mocked_node).set_process(false) # now we want to test a other scenario and we need to reset the current recorded interactions reset(mocked_node) # we verify the previously recorded interactions have been removed verify_no_more_interactions(mocked_node) # continue testing .. mocked_node.set_process(true) verify(mocked_node).set_process(true) verify_no_more_interactions(mocked_node) . Mock Working Modes . When creating a mock, you can specify the working mode that defines the return value handling of function calls for a mock. | RETURN_DEFAULTS (default) | CALL_REAL_FUNC | RETURN_DEEP_STUB (not yet implemented!) | . | RETURN_DEFAULTS | CALL_REAL_FUNC | RETURN_DEEP_STUB | . | If RETURN_DEFAULTS is used, all unoverridden function calls return default values for a mocked class. var mock := mock(TestClass) as TestClass # returns a default value (for String an empty value) assert_str(mock.message()).is_equal(\"\") . | If CALL_REAL_FUNC is used, all unoverridden function calls return the value provided by the real implementation for a mocked class. Helpful when you only want to mock partial functions of a class. # build a mock with mode CALL_REAL_FUNC var mock := mock(TestClass, CALL_REAL_FUNC) as TestClass # returns the real implementation value assert_str(mock.message()).is_equal(\"a message\") # set a the return value to 'custom message' for the function message() do_return(\"custom message\").on(mock).message() # now the function message will return 'custom message' assert_str(mock.message()).is_equal(\"custom message\") . | WORK IN PROGRESS – NOT SUPPORTED YET!!! . If RETURN_DEEP_STUB is used, all unoverridden function calls return the value provided by the real implementation for a mocked class. Use to return a default value for build-in types or a fully mocked value for Object types. # build a mock with mode RETURN_DEEP_STUB var mock := mock(TestClass, RETURN_DEEP_STUB) as TestClass # returns a default value assert_str(mock.message()).is_equal(\"\") # returns a mocked Path value assert_object(mock.path()).is_not_null() . | . Default Values . Unconfigured function calls do return a default value for mock working mode RETURN_DEFAULTS . | Type | default value | . | TYPE_NIL | null | . | TYPE_BOOL | false | . | TYPE_INT | 0 | . | TYPE_REAL | 0.0 | . | TYPE_STRING | ”” | . | TYPE_VECTOR2 | Vector2.ZERO | . | TYPE_RECT2 | Rect2() | . | TYPE_VECTOR3 | Vector3.ZERO | . | TYPE_TRANSFORM2D | Transform2D() | . | TYPE_PLANE | Plane() | . | TYPE_QUAT | Quat() | . | TYPE_AABB | AABB() | . | TYPE_BASIS | Basis() | . | TYPE_TRANSFORM | Transform() | . | TYPE_COLOR | Color() | . | TYPE_NODE_PATH | NodePath() | . | TYPE_RID | RID() | . | TYPE_OBJECT | null | . | TYPE_DICTIONARY | Dictionary() | . | TYPE_ARRAY | Array() | . | TYPE_RAW_ARRAY | PoolByteArray() | . | TYPE_INT_ARRAY | PoolIntArray() | . | TYPE_REAL_ARRAY | PoolRealArray() | . | TYPE_STRING_ARRAY | PoolStringArray() | . | TYPE_VECTOR2_ARRAY | PoolVector2Array() | . | TYPE_VECTOR3_ARRAY | PoolVector3Array() | . | TYPE_COLOR_ARRAY | PoolColorArray() | . Argument Matchers and mocks . To simplify the verification of function calls, you can use an argument matcher. This allows you to verify function calls by a specific type or class argument. var mocked_node :Node = mock(Node) # call with different arguments mocked_node.set_process(false) # 1 times mocked_node.set_process(true) # 1 times mocked_node.set_process(true) # 2 times # verify how often we called the function with a boolean argument verify(mocked_node, 3).set_process(any_bool()) . For more details please show at Argument Matchers . ",
    "url": "/gdUnit3/advanced_testing/mock/#mocking-is-current-only-supported-for-gdscripts",
    "relUrl": "/advanced_testing/mock/#mocking-is-current-only-supported-for-gdscripts"
  },"70": {
    "doc": "Mocking",
    "title": "Mocking",
    "content": " ",
    "url": "/gdUnit3/advanced_testing/mock/",
    "relUrl": "/advanced_testing/mock/"
  },"71": {
    "doc": "Orphan Nodes",
    "title": "Orphan Nodes or leaking Memory",
    "content": "In Godot, objects that are not freed are called orphan nodes. When you start writing a test, you often have no way of knowing whether all of the objects you created were properly shared after the test was run. One helping tool is using auto_free to manage your object. How to fix detected orphan nodes . With GdUnit you can easily identify orphaned nodes, these are marked as WARNING in the GdUnit inspector. I recommend repairing any orphaned nodes discovered to make sure your project does not leak memory over time. How do I recognize orphan nodes in my code? . Finding the code location where the orphaned nodes are located is a little difficult and often time consuming. If you are not an expert and have no idea what the problem is, I recommend a step-by-step approach. Here an small example of an class with an orphan node. class_name MyTestClass extends Resource class PathX extends Path: var _valid :bool func _init(): _valid = false func validate() -&gt; PathX: _valid = true return self var _path : PathX = PathX.new() func calculate_path() -&gt; Path: return _path.validate() . And a small test . class_name MyTes extends GdUnitTestSuite func test_get_pathx(): var t := DeepStubTestClass.new() assert_object(t).is_not_null() assert_object(t.get_pathx()).is_instanceof(DeepStubTestClass.PathX) . After test run the test ends with success but it has detects one orphan node. Now you can review your implementation, if you don’t know where the orphaned node is, take it step by step. Means to comment out line by line or a series of lines and run the test again. func test_get_pathx(): var t := DeepStubTestClass.new() assert_object(t).is_not_null() #assert_object(t.get_pathx()).is_instanceof(DeepStubTestClass.PathX) . Try again after the orphaned node is rediscovered. func test_get_pathx(): var t := DeepStubTestClass.new() #assert_object(t).is_not_null() #assert_object(t.get_pathx()).is_instanceof(DeepStubTestClass.PathX) . Since only one line is now active, the error must be located in the constructor. Ok let us check the constructor. The class MyTestClass has no cunstructor, you miss the _init() function? . This means that the class has a default constructor and we are not making a mistake here. So let take a deeper look on the used member variables... var _path : PathX = PathX.new() func calculate_path() -&gt; Path: return _path.validate() . Here we assign a variable with an instance of XPath. The XPath class inherits from a Path where also inherits from a Node. A Node is not a reference that is automatically released when it is no longer used (I recomment to read the offical Godot documentation about References vs Objects). Looks like we’ve found the problem, but how to fix it? . The example class inherits from a Resource, which implicitly means that all resources should be automatically freed. We have to now to override the _notification func where is called when a resource is freed. func _notification(what): # we notified for freeing your resources if what == NOTIFICATION_PREDELETE: # check if _path a valid object (not already freed) if _path: _path.free() . Rerun your test and you see the orpahn nodes is fixed. Finally activate the commented-out lines and run the test again. ",
    "url": "/gdUnit3/advanced_testing/orphan/#orphan-nodes-or-leaking-memory",
    "relUrl": "/advanced_testing/orphan/#orphan-nodes-or-leaking-memory"
  },"72": {
    "doc": "Orphan Nodes",
    "title": "Orphan Nodes",
    "content": " ",
    "url": "/gdUnit3/advanced_testing/orphan/",
    "relUrl": "/advanced_testing/orphan/"
  },"73": {
    "doc": "Scene Runner",
    "title": "Scene Runner",
    "content": "Definition . A Scene Runner is a tool for simulating interactions on a scene. With this tool you can simulate input events like keyboard or mouse or/and simulate scene processing over a certain number of frames. This is typical used for integration testing a scene. How to use it . The scene runner is managed by the GdUnit API and is automatically freed after use. One scene runner can only manage one scene, if you need more you have to create a separate runner for each scene in you test-suite. | GdScript | C# | . | Use the scene runner with scene_runner(&lt;scene&gt;) in which you load the scene to be tested. var runner := scene_runner(\"res://my_scene.tscn\") . | Use the scene runner with ISceneRunner.Load(&lt;scene&gt;) in which you load the scene to be tested. ISceneRunner runner = ISceneRunner.Load(\"res://my_scene.tscn\"); . | . For more advanced example, see Tutorial - Testing Scenes . Function Overview . | GdScript | C# | . | | Function | Description | . | simulate_key_pressed | Simulates that a key has been pressed | . | simulate_key_press | Simulates that a key is pressed | . | simulate_key_release | Simulates that a key has been released | . | simulate_mouse_move | Simulates a mouse moved to relative position by given speed | . | simulate_mouse_button_pressed | Simulates a mouse button pressed | . | simulate_mouse_button_press ] | Simulates a mouse button press (holding) | . | simulate_mouse_button_release | Simulates a mouse button released | . | simulate_frames | Simulates scene processing for a certain number of frames (respecting time factor) | . | set_mouse_pos | Sets the mouse cursor to given position relative to the viewport. | . | await_signal | Waits for given signal is emited by the scene until a specified timeout to fail | . | await_signal_on | Waits for given signal is emited by the source until a specified timeout to fail | . | await_func | Waits for the function return value until specified timeout or fails | . | await_func_on | Waits for the function return value of specified source until specified timeout or fails | . | get_property | Return the current value of a property | . | invoke | Executes the function specified by name in the scene and returns the result | . | set_time_factor | Sets how fast or slow the scene simulation is processed (clock ticks versus the real). | . | maximize_view | maximizes the window to bring the scene visible | . | | Function | Description | . | SimulateKeyPressed | Simulates that a key has been pressed | . | SimulateKeyPress | Simulates that a key is pressed | . | SimulateKeyRelease | Simulates that a key has been released | . | SimulateMouseMove | Simulates a mouse moved to relative position by given speed | . | SimulateMouseButtonPressed | Simulates a mouse button pressed | . | SimulateMouseButtonPress ] | Simulates a mouse button press (holding) | . | SimulateMouseButtonRelease | Simulates a mouse button released | . | SimulateFrames | Simulates scene processing for a certain number of frames (respecting time factor) | . | SetMousePos | Sets the mouse cursor to given position relative to the viewport. | . | AwaitSignal | Waits for given signal is emited by the scene until a specified timeout to fail | . | AwaitSignalOn | Waits for given signal is emited by the source until a specified timeout to fail | . | AwaitMethod | Waits for the function return value until specified timeout or fails | . | AwaitMethodOn | Waits for the function return value of specified source until specified timeout or fails | . | GetProperty | Return the current value of a property | . | Invoke | Executes the function specified by name in the scene and returns the result | . | SetTimeFactor | Sets how fast or slow the scene simulation is processed (clock ticks versus the real). | . | MoveWindowToForeground | maximizes the window to bring the scene visible | . | . simulate_key_pressed . Simulates that a key has been pressed. | GdScript | C# | . | # key_code : the key code e.g. 'KEY_ENTER' # shift : false by default set to true if simmulate shift is press # control : false by default set to true if simmulate control is press func simulate_key_pressed(&lt;key_code&gt; :int, [shift] :bool, [control] :bool) -&gt; GdUnitSceneRunner: . # simulate the enter key is pressed runner.simulate_key_pressed(KEY_ENTER) # simulates key combination ctrl+C is pressed runner.simulate_key_pressed(KEY_C, false, true) . | /// &lt;summary&gt; /// Simulates that a key has been pressed. /// &lt;/summary&gt; /// &lt;param name=\"keyCode\"&gt;the key code e.g. 'KeyList.Enter'&lt;/param&gt; /// &lt;param name=\"shift\"&gt;false by default set to true if simmulate shift is press&lt;/param&gt; /// &lt;param name=\"control\"&gt;false by default set to true if simmulate control is press&lt;/param&gt; /// &lt;returns&gt;SceneRunner&lt;/returns&gt; ISceneRunner SimulateKeyPressed(KeyList keyCode, bool shift = false, bool control = false); . // simulate the enter key is pressed runner.SimulateKeyPressed(KeyList.Enter); // simulates key combination ctrl+C is pressed runner.SimulateKeyPressed(KeyList.C, false, true); . | . simulate_key_press . Simulates that a key is press. | GdScript | c# | . | # key_code : the key code e.g. 'KEY_ENTER' # shift : false by default set to true if simmulate shift is press # control : false by default set to true if simmulate control is press func simulate_key_press(&lt;key_code&gt; :int, [shift] :bool, [control] :bool) -&gt; GdUnitSceneRunner: . # simulate the enter key is press runner.simulate_key_press(KEY_ENTER) # simulates key combination ctrl+C is pressed runner.simulate_key_press(KEY_C, false, true) . | /// &lt;summary&gt; /// Simulates that a key is pressed. /// &lt;/summary&gt; /// &lt;param name=\"keyCode\"&gt;the key code e.g. 'KeyList.Enter'&lt;/param&gt; /// &lt;param name=\"shift\"&gt;false by default set to true if simmulate shift is press&lt;/param&gt; /// &lt;param name=\"control\"&gt;false by default set to true if simmulate control is press&lt;/param&gt; /// &lt;returns&gt;SceneRunner&lt;/returns&gt; ISceneRunner SimulateKeyPress(KeyList keyCode, bool shift = false, bool control = false); . // simulate the enter key is press runner.SimulateKeyPress(KeyList.Enter); // simulates key combination ctrl+C is pressed runner.SimulateKeyPress(KeyList.C, false, true); . | . simulate_key_release . Simulates that a key has been released . | GdScript | C# | . | # key_code : the key code e.g. 'KEY_ENTER' # shift : false by default set to true if simmulate shift is press # control : false by default set to true if simmulate control is press func simulate_key_release(&lt;key_code&gt; :int, [shift] :bool, [control] :bool) -&gt; GdUnitSceneRunner: . # simulate a enter key is released runner.simulate_key_release(KEY_ENTER) # simulates key combination ctrl+C is released runner.simulate_key_release(KEY_C, false, true) . | /// &lt;summary&gt; /// Simulates that a key has been released. /// &lt;/summary&gt; /// &lt;param name=\"keyCode\"&gt;the key code e.g. 'KeyList.Enter'&lt;/param&gt; /// &lt;param name=\"shift\"&gt;false by default set to true if simmulate shift is press&lt;/param&gt; /// &lt;param name=\"control\"&gt;false by default set to true if simmulate control is press&lt;/param&gt; /// &lt;returns&gt;SceneRunner&lt;/returns&gt; ISceneRunner SimulateKeyRelease(KeyList keyCode, bool shift = false, bool control = false); . // simulate a enter key is released runner.SimulateKeyRelease(KeyList.Enter); // simulates key combination ctrl+C is released runner.SimulateKeyRelease(KeyList.C, false, true); . | . simulate_mouse_move . Simulates a mouse moved to relative position by given speed . | GdScript | C# | . | # relative: The mouse position relative to the previous position (position at the last frame). # speed : The mouse speed in pixels per second.‚ func simulate_mouse_move(&lt;relative&gt; :Vector2, [speed] :Vector2) -&gt; GdUnitSceneRunner: . # set mouse pos to a inital position runner.set_mouse_pos(Vector2(160, 20)) # simulates a mouse move to final position 200,40 runner.simulate_mouse_move(Vector2(200, 40)) . | /// &lt;summary&gt; /// Simulates a mouse moved to relative position by given speed. /// &lt;/summary&gt; /// &lt;param name=\"relative\"&gt;The mouse position relative to the previous position (position at the last frame).&lt;/param&gt; /// &lt;param name=\"speed\"&gt;The mouse speed in pixels per second.&lt;/param&gt; /// &lt;returns&gt;SceneRunner&lt;/returns&gt; ISceneRunner SimulateMouseMove(Vector2 relative, Vector2 speeds = default); . # set mouse pos to a inital position runner.SimulateMouseMove(new Vector2(160, 20)) # simulates a mouse move to final position 200,40 runner.SimulateMouseMove(new Vector2(200, 40)) . | . simulate_mouse_button_pressed . Simulates a mouse button pressed . | GdScript | C# | . | # buttonIndex: The mouse button identifier, one of the ButtonList button or button wheel constants. func simulate_mouse_button_pressed(&lt;buttonIndex&gt; :int) -&gt; GdUnitSceneRunner: . # simulates mouse left button pressed runner.simulate_mouse_button_pressed(BUTTON_LEFT) . | /// &lt;summary&gt; /// Simulates a mouse button pressed. /// &lt;/summary&gt; /// &lt;param name=\"button\"&gt;The mouse button identifier, one of the ButtonList button or button wheel constants.&lt;/param&gt; /// &lt;returns&gt;SceneRunner&lt;/returns&gt; ISceneRunner SimulateMouseButtonPressed(ButtonList button); . // simulates mouse left button pressed runner.SimulateMouseButtonPressed(ButtonList.Left); . | . simulate_mouse_button_press . Simulates a mouse button press (holding) . | GdScript | C# | . | # buttonIndex: The mouse button identifier, one of the ButtonList button or button wheel constants. func simulate_mouse_button_press(&lt;buttonIndex&gt; :int) -&gt; GdUnitSceneRunner: . # simulates mouse left button is press runner.simulate_mouse_button_press(BUTTON_LEFT) . | /// &lt;summary&gt; /// Simulates a mouse button press. (holding) /// &lt;/summary&gt; /// &lt;param name=\"button\"&gt;The mouse button identifier, one of the ButtonList button or button wheel constants.&lt;/param&gt; /// &lt;returns&gt;SceneRunner&lt;/returns&gt; ISceneRunner SimulateMouseButtonPress(ButtonList button); . // simulates mouse left button is press runner.SimulateMouseButtonPress(ButtonList.Left); . | . simulate_mouse_button_release . Simulates a mouse button released . | GdScript | C# | . | # buttonIndex: The mouse button identifier, one of the ButtonList button or button wheel constants. func simulate_mouse_button_release(&lt;buttonIndex&gt; :int) -&gt; GdUnitSceneRunner: . # simulates mouse left button is released runner.simulate_mouse_button_release(BUTTON_LEFT) . | /// &lt;summary&gt; /// Simulates a mouse button released. /// &lt;/summary&gt; /// &lt;param name=\"button\"&gt;The mouse button identifier, one of the ButtonList button or button wheel constants.&lt;/param&gt; /// &lt;returns&gt;SceneRunner&lt;/returns&gt; ISceneRunner SimulateMouseButtonRelease(ButtonList button); . // simulates mouse left button is released runner.SimulateMouseButtonRelease(ButtonList.Left); . | . simulate_frames . Simulates scene processing for a certain number of frames by respecting the configured time factor . | GdScript | C# | . | # frames: amount of frames to process # delta_milli: the time delta between a frame in milliseconds func simulate_frames(&lt;frames&gt;, [delta_milli]) -&gt; GdUnitSceneRunner: . # simulates scene processing over 60 frames yield(runner.simulate_frames(60), \"completed\") # simulates scene processing over 60 frames with a delay of 100ms peer frame yield(runner.simulate_frames(60, 100), \"completed\") . | /// &lt;summary&gt; /// Simulates scene processing for a certain number of frames by given delta peer frame by ignoring the current time factor /// &lt;/summary&gt; /// &lt;param name=\"frames\"&gt;amount of frames to process&lt;/param&gt; /// &lt;param name=\"deltaPeerFrame\"&gt;the time delta between a frame in milliseconds&lt;/param&gt; /// &lt;returns&gt;Task to wait&lt;/returns&gt; Task SimulateFrames(uint frames, uint deltaPeerFrame); . // simulates scene processing over 60 frames await runner.SimulateFrames(60); // simulates scene processing over 60 frames with a delay of 100ms peer frame await runner.SimulateFrames(60, 100); . | . await_signal . Waits for given signal is emited by the scene until a specified timeout to fail . | GdScript | C# | . | # signal_name: signal name # args: the expected signal arguments as an array # timeout: the timeout in ms, default is set to 2000ms func await_signal(&lt;signal_name&gt; :String, &lt;args&gt; :Array, [timeout]): . # simulates scene processing until the signal `tree_entered` is emitted yield(runner.await_signal(\"tree_entered\"), \"completed\") # simulates scene processing until the signal `my_signal` with arguments (\"foo\",10) is emitted yield(runner.await_signal(\"my_signal\", \"foo\", 10), \"completed\") . | /// &lt;summary&gt; /// Waits for given signal is emited. /// &lt;/summary&gt; /// &lt;param name=\"signal\"&gt;The name of the signal to wait&lt;/param&gt; /// &lt;returns&gt;Task to wait&lt;/returns&gt; Task AwaitSignal(string signal, params object[] args); . // simulates scene processing until the signal `tree_entered` is emitted await runner.AwaitSignal(\"tree_entered\"); // simulates scene processing until the signal `my_signal` with arguments (\"foo\",10) is emitted await runner.AwaitSignal(\"my_signal\", \"foo\", 10); . | . await_signal_on . Waits for the function return value of specified source until specified timeout or fails . | GdScript | C# | . | # source: the object from which the signal is emitted # signal_name: signal name # args: the expected signal arguments as an array # timeout: the timeout in ms, default is set to 2000ms func await_signal_on(&lt;source&gt; :Object, &lt;signal_name&gt; :String, &lt;args&gt; :Array, [timeout]): . # simulates scene processing until the signal `door_closed` is emitted by door yield(runner.await_signal_on(door, \"door_closed\"), \"completed\") . | not yet supported! . | . await_func . Waits for the function return value until specified timeout or fails . | GdScript | C# | . | # args : optional function arguments func await_func(&lt;func_name&gt; :String, &lt;args&gt; :Array) -&gt; GdUnitFuncAssert: . # waits until the function `has_parent()` returns false or fails after an timeout of 5s yield(runner.await_func(\"has_parent\").wait_until(5000).is_false(), \"completed\") . | /// &lt;summary&gt; /// Returns a method awaiter to wait for a specific method result. /// &lt;/summary&gt; /// &lt;typeparam name=\"V\"&gt;The expected result type&lt;/typeparam&gt; /// &lt;param name=\"methodName\"&gt;The name of the method to wait&lt;/param&gt; /// &lt;returns&gt;GodotMethodAwaiter&lt;/returns&gt; GdUnitAwaiter.GodotMethodAwaiter&lt;V&gt; AwaitMethod&lt;V&gt;(string methodName); . // waits until the function `has_parent()` returns false or fails after an timeout of 5s await runner.AwaitMethod&lt;bool&gt;(\"has_parent\").IsFalse().WithTimeout(5000); . | . await_func_on . Waits for the function return value of specified source until specified timeout or fails . | GdScript | C# | . | # source: the object where implements the function # args : optional function arguments func await_func_on(&lt;source&gt; :Object, &lt;func_name&gt; :String, &lt;args&gt; :Array) -&gt; GdUnitFuncAssert: . # waits until the function `has_parent()` on source `door` returns false or fails after an timeout of 5s yield(runner.await_func_on(door, \"has_parent\").wait_until(5000).is_false(), \"completed\") . | not yet supported . | . get_property . Returns the current value of the property from the current scene. | GdScript | C# | . | # name: name of property # retuen: the value of the property func get_property(&lt;name&gt; :String): . # returns the current property `_door_color` from the scene var color :ColorRect = runner.get_property(\"_door_color\") . | /// &lt;summary&gt; /// Returns the property by given name. /// &lt;/summary&gt; /// &lt;typeparam name=\"T\"&gt;The type of the property&lt;/typeparam&gt; /// &lt;param name=\"name\"&gt;The parameter name&lt;/param&gt; /// &lt;returns&gt;The value of the property or throws a MissingFieldException&lt;/returns&gt; /// &lt;exception cref=\"MissingFieldException\"/&gt; public T GetProperty&lt;T&gt;(string name); . // returns the current property `_door_color` from the scene ColorRect color = runner.GetProperty(\"_door_color\"); . | . invoke . Executes the function specified by given name in the scene and returns the result . | GdScript | C# | . | # name: the name of the function to execute # optional function args 0..9 # return: the function result func invoke(name :String, arg0=NO_ARG, arg1=NO_ARG, arg2=NO_ARG, arg3=NO_ARG, arg4=NO_ARG, arg5=NO_ARG, arg6=NO_ARG, arg7=NO_ARG, arg8=NO_ARG, arg9=NO_ARG): . # invokes the function `start_color_cycle` from the current scene runner.invoke(\"start_color_cycle\") . | /// &lt;summary&gt; /// Invokes the method by given name and arguments. /// &lt;/summary&gt; /// &lt;param name=\"name\"&gt;The name of method to invoke&lt;/param&gt; /// &lt;param name=\"args\"&gt;The function arguments&lt;/param&gt; /// &lt;returns&gt;The return value of invoked method&lt;/returns&gt; /// &lt;exception cref=\"MissingMethodException\"/&gt; public object Invoke(string name, params object[] args); . // invokes the function `start_color_cycle` from the current scene runner.Invoke(\"start_color_cycle\"); . | . set_mouse_pos . Sets the mouse cursor to given position relative to the viewport. | GdScript | C# | . | func set_mouse_pos(&lt;pos&gt; :Vector2) -&gt; GdUnitSceneRunner: . # sets the current mouse position to 100, 100 runner.set_mouse_pos(Vector2(100, 100)) . | /// &lt;summary&gt; /// Sets the actual mouse position relative to the viewport. /// &lt;/summary&gt; /// &lt;param name=\"position\"&gt;The position in x/y coordinates&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; ISceneRunner SetMousePos(Vector2 position); . // sets the current mouse position to 100, 100 runner.SetMousePos(new Vector2(100, 100)); . | . maximize_view . Maximizes the window to make the scene visible, sensibly set for debugging reasons to see the scene output. | GdScript | C# | . | func maximize_view() -&gt; GdUnitSceneRunner: . # shows the scene running runner.maximize_view() . | /// &lt;summary&gt; /// Shows the running scene and moves the window to the foreground. /// &lt;/summary&gt; void MoveWindowToForeground(); . // shows the scene running runner.MoveWindowToForeground(); . | . set_time_factor . Sets how fast or slow the scene simulation is processed (clock ticks versus the real). | GdScript | C# | . | # It defaults to 1.0. A value of 2.0 means the game moves twice as fast as real life, # whilst a value of 0.5 means the game moves at half the regular speed. func set_time_factor(&lt;time_factor&gt; := 1.0) -&gt; GdUnitSceneRunner: . # sets time factor to 5 runner.set_time_factor(5) # simulated 60 frames ~5 times faster now yield(runner.simulate_frames(60), \"completed\") . | /// &lt;summary&gt; /// Sets how fast or slow the scene simulation is processed (clock ticks versus the real). /// &lt;/summary&gt; /// &lt;param name=\"timeFactor\"&gt;&lt;/param&gt; /// &lt;returns&gt;SceneRunner&lt;/returns&gt; ISceneRunner SetTimeFactor(double timeFactor = 1.0); . // sets time factor to 5 runner.SetTimeFactor(5); // simulated 60 frames ~5 times faster now await runner.SimulateFrames(60); . | . ",
    "url": "/gdUnit3/advanced_testing/sceneRunner/",
    "relUrl": "/advanced_testing/sceneRunner/"
  },"74": {
    "doc": "Spying",
    "title": "Spy",
    "content": " ",
    "url": "/gdUnit3/advanced_testing/spy/#spy",
    "relUrl": "/advanced_testing/spy/#spy"
  },"75": {
    "doc": "Spying",
    "title": "Spy is current only supported for GdScripts!",
    "content": "Definition . A Spy is used to verify a certain behavior during a test and tracks all function calls and their parameters of an instance. var to_spy := spy(&lt;instance&gt;) . What is the difference between a spy and an mock? . In difference to a mock on a spy the real implementation is called. It will still behave in the same way as the normal instance. How to use a Spy . To spy on a object you only need to use spy(&lt;instance&gt;). A spyed instance is marked for auto free, you don’t need to free it manually. var spy:= spy(auto_free(Node.new())) . Here a small example to use the spy on a instance of the class ‘TestClass’. class_name TestClass extends Node func message() -&gt; String: return \"a message\" . func test_spy(): var instance = auto_free(TestClass.new()) # build a spy on the instance var spy:= spy(instance) # call function `message` on the spy to track the interaction spy.message() # verify the function 'message' is called one times verify(spy, 1).message() . Verification of function calls . A spy keeps track of all the function calls and their arguments. Use verify() on the spy to verify that the specified conditions are met. This way you can check if a certain function is called and how often it was called. | Function | Description | . | verify | Verifies certain behavior happened at least once or exact number of times | . | verify_no_interactions | Verifies no interactions is happen on this spy | . | verify_no_more_interactions | Verifies the given spy has any unverified interaction | . | reset | Resets the saved function call counters on a spy | . verify_no_interactions . Verifies no interactions is happen on this spy. verify_no_interactions(&lt;spy&gt;) . var spyed_node := spy(Node.new()) as Node # test we have initial no interactions on this spy verify_no_interactions(spyed_node) # interact by calling `get_name()` spyed_node.get_name() # now this verification will fail because we have interacted on this spy verify_no_interactions(spyed_node) . verify_no_more_interactions . Checks whether the specified spy has no further interaction. If the spy has recorded more interactions than you verified with verify(), an error is reported. verify_no_more_interactions(&lt;spy&gt;) . var spyed_node := spy(Node.new()) as Node # interact on two functions spyed_node.is_a_parent_of(null) spyed_node.set_process(false) # verify if interacts verify(spyed_node).is_a_parent_of(null) verify(spyed_node).set_process(false) # finally we want to check no more interactions on this spy was happen verify_no_more_interactions(spyed_node) # simmulate a unexpected interaction on `set_process` spyed_node.set_process(false) # no the verify will fail because we have an interacted on `set_process(false)` where we not expected verify_no_more_interactions(spyed_node) . verify . Verifies certain behavior happened at least once or exact number of times . verify(&lt;spy&gt;, &lt;times&gt;).function(&lt;args&gt;) . var spyed_node :Node = spy(Node.new()) # verify we have no interactions currently on this instance verify_no_interactions(spyed_node) # call with different arguments spyed_node.set_process(false) # 1 times spyed_node.set_process(true) # 1 times spyed_node.set_process(true) # 2 times # verify how often we called the function with different argument verify(spyed_node, 1).set_process(false)# in sum one time with false verify(spyed_node, 2).set_process(true) # in sum two times with true # verify will fail because we expect the function `set_process(true)` is called 3 times but was called 2 times verify(spyed_node, 3).set_process(true) . reset . Resets the recorded function interactions of given spy. Sometimes we want to reuse an already created spy for different test scenarios and have to reset the recorded interactions. reset(&lt;spy&gt;) . var spyed_node :Node = spy(Node.new()) # first testing interact on two functions spyed_node.is_a_parent_of(null) spyed_node.set_process(false) # verify if interacts,at this point two interactions are recorded verify(spyed_node).is_a_parent_of(null) verify(spyed_node).set_process(false) # now we want to test a other scenario and we need to reset the current recorded interactions reset(spyed_node) # we verify the previously recorded interactions have been removed verify_no_more_interactions(spyed_node) # continue testing .. spyed_node.set_process(true) verify(spyed_node).set_process(true) verify_no_more_interactions(spyed_node) . Argument Matchers and spys . To simplify the verification of function calls, you can use an argument matcher. This allows you to verify function calls by a specific type or class argument. var spyed_node :Node = spy(Node.new()) # call with different arguments spyed_node.set_process(false) # 1 times spyed_node.set_process(true) # 1 times spyed_node.set_process(true) # 2 times # verify how often we called the function with a boolean argument verify(spyed_node, 3).set_process(any_bool()) . For more details please show at Argument Matchers . ",
    "url": "/gdUnit3/advanced_testing/spy/#spy-is-current-only-supported-for-gdscripts",
    "relUrl": "/advanced_testing/spy/#spy-is-current-only-supported-for-gdscripts"
  },"76": {
    "doc": "Spying",
    "title": "Spying",
    "content": " ",
    "url": "/gdUnit3/advanced_testing/spy/",
    "relUrl": "/advanced_testing/spy/"
  },"77": {
    "doc": "Tools and Monitoring",
    "title": "Tools and Monitoring",
    "content": "GdUnit offers numerous functions that make it easier to write tests. error_as_string . Map Godot error number to a readable error message. SeeError Codes . | GdScript | C# | . | func error_as_string(error_number :int) -&gt; String: . | Not yet implemented! . | . auto_free() . A little helper for automatically releasing your created objects after the test execution. Objects do not manage memory. If a class inherits from Object, you will have to delete instances of it manually. References keep an internal reference counter so that they are automatically released when no longer in use, and only then. References therefore do not need to be freed manually with Object.free. Use auto_free() to automatically released Objects when no longer in use. | GdScript | C# | . | func auto_free(obj :Object) -&gt; Object: . | public static T AutoFree&lt;T&gt;(T obj); . | . Example: . | GdScript | C# | . | # using auto_free() on Path object to register for freeing after the test is finished assert_object(auto_free(Path.new())).is_not_instanceof(Tree) . | // using AutoFree() on Path object to register for freeing after the test is finished AssertObject(AutoFree(new Godot.Path())).IsNotInstanceOf&lt;Godot.Tree&gt;(); . | . A small example test suite to show up memory usage and freeing . Objects covered by auto_free live only in the scope where it is used. Scopes are: test suite setup, test case setup and tests . extends GdUnitTestSuite var _obj_a; var _obj_b; var _obj_c; # Scope test suite setup func before(): _obj_a = auto_free(Node.new()) print_obj_usage(\"before\") # Scope test case setup func before_test(): _obj_b = auto_free(Node.new()) print_obj_usage(\"before_test\") # Scope test func test(): _obj_c = auto_free(Node.new()) # _obj_a still lives here # _obj_b still lives here # _obj_b still lives here print_obj_usage(\"test\") # Scope test case setup func after_test(): # _obj_a still lives here # _obj_b still lives here # _obj_c is freed print_obj_usage(\"after_test\") # Scope test suite setup func after(): # _obj_a still lives here # _obj_b is auto freed # _obj_c is freed print_obj_usage(\"after\") func _notification(what): if what == NOTIFICATION_PATH_CHANGED: print_header() else: print_obj_usage(GdObjects.notification_as_string(what)) func print_header() : prints(\"|%16s | %16s | %16s | %16s |\" % [\"\", \"_obj_a\", \"_obj_b\", \"_obj_c\"]) prints(\"----------------------------------------------------------------------------\") func print_obj_usage(name :String) : prints(\"|%16s | %16s | %16s | %16s |\" % [name, _obj_a, _obj_b, _obj_c]) . | _obj_a | _obj_b | _obj_c | ---------------------------------------------------------------------------- | PARENTED | Null | Null | Null | ENTER_TREE | Null | Null | Null | POST_ENTER_TREE | Null | Null | Null | READY | Null | Null | Null | before | [Node:1515] | Null | Null | before_test | [Node:1515] | [Node:1519] | Null | test | [Node:1515] | [Node:1519] | [Node:1521] | after_test | [Node:1515] | [Node:1519] | [Deleted Object] | after | [Node:1515] | [Deleted Object] | [Deleted Object] | EXIT_TREE | [Deleted Object] | [Deleted Object] | [Deleted Object] | UNPARENTED | [Deleted Object] | [Deleted Object] | [Deleted Object] | PREDELETE | [Deleted Object] | [Deleted Object] | [Deleted Object] | . create_temp_dir . Creates a new directory under the temporary directory user://tmp. Useful for storing data during test execution. The directory is automatically deleted after the execution of the test suite. | GdScript | C# | . | func create_temp_dir(relative_path :String) -&gt; String: . | string CreateTempDir(string path); . | . Example: . func test_save_game_data(): # create a temporay directory to store test data var temp_dir := create_temp_dir(\"examples/game/save\") var file_to_save := temp_dir + \"/save_game.dat\" var data = { 'user': \"Hoschi\", 'level': 42 } var file := File.new() file.open(file_to_save, File.WRITE) file.store_line(JSON.print(data)) file.close() # the data is saved at \"user://tmp/examples/game/save/save_game.dat\" assert_bool(file.file_exists(file_to_save)).is_true() . clean_temp_dir . Deletes the temporary directory. Is called automatically after each execution of the test suite. | GdScript | C# | . | func clean_temp_dir(): . | void ClearTempDir(); . | . create_temp_file . Creates a new File under the temporary directory user://tmp + &lt;relative_path&gt; with given name &lt;file_name&gt; and given file &lt;mode&gt; (default = File.WRITE). If success the returned File is automatically closed after the execution of the test suite. func create_temp_file(relative_path :String, file_name :String, mode :=File.WRITE) -&gt; File: . Example: We create a small test file in the beginning of a test suite on before() and read it later on the test. It is not need to close the file (e.g. you forgot it to close), the GdUnit test runner will close it automaticaly. # setup test data func before(): # opens a tmp file with WRITE mode under \"user://tmp/examples/game/game.sav\" (auto closed) var file := create_temp_file(\"examples/game\", \"game.sav\") assert_object(file).is_not_null() # write some example data file.store_line(\"some data\") # not needs to be manually close, will be auto closed before test execution func test_create_temp_file(): # opens the stored tmp file with READ mode under \"user://tmp/examples/game/game.sav\" (auto closed) var file_read := create_temp_file(\"examples/game\", \"game.sav\", File.READ) assert_object(file_read).is_not_null() assert_str(file_read.get_as_text()).is_equal(\"some data\\n\") # not needs to be manually close, will be auto closed after test suite execution . resource_as_array . Reads a resource by given path &lt;resource_path&gt; into an pooled string array. func resource_as_array(resource_path :String) -&gt; PoolStringArray: . Example: . var rows = [\"row a\", \"row b\"] var file_content := resource_as_array(\"res://myproject/test/resources/TestRows.txt\") assert_array(rows).contains_exactly(file_content) . resource_as_string . Reads a resource by given path &lt;resource_path&gt; and returned the content as String. func resource_as_string(resource_path :String) -&gt; String: . Example: . var rows = \"row a\\nrow b\\n\" var file_content := resource_as_string(\"res://myproject/test/resources/TestRows.txt\") assert_string(rows).is_equal(file_content) . ",
    "url": "/gdUnit3/advanced_testing/tools/",
    "relUrl": "/advanced_testing/tools/"
  },"78": {
    "doc": "Tools and Monitoring",
    "title": "Monitoring",
    "content": ". Orphan Nodes or leaking Memory . In Godot, objects that are not freed are called orphan nodes. When you start writing a test, you often have no way of knowing whether all of the objects you created were properly shared after the test was run. One helping tool is using auto_free to manage your object. GdUnit will help you by reporting detected orphan nodes for each test run in the status bar. A green icon indicates no orphan nodes detected and a red blinking icon warns you to have detected orphan nodes. Use the button to jump to the first orphan node to inspect. Orphan nodes are reported and marked in yellow for each test step as before(), before_test() and the test itself. I recommend checking your implementation if any orphan nodes are detected, follow the guide to fix. Test Execution Time . On the status bar at the bottom left the total elapsed execution time is shown. The execution time is messured to for each testsuite and testcase and can be read on each element in the tree inspector. ",
    "url": "/gdUnit3/advanced_testing/tools/#monitoring",
    "relUrl": "/advanced_testing/tools/#monitoring"
  },"79": {
    "doc": "Tutorials",
    "title": "Tutorials",
    "content": " ",
    "url": "/gdUnit3/tutorials/index/",
    "relUrl": "/tutorials/index/"
  },"80": {
    "doc": "Basics",
    "title": "Basics",
    "content": ". ",
    "url": "/gdUnit3/tutorials/tutorial_basics/",
    "relUrl": "/tutorials/tutorial_basics/"
  },"81": {
    "doc": "Basics",
    "title": "Placeholder for upcoming Tutorial videos",
    "content": " ",
    "url": "/gdUnit3/tutorials/tutorial_basics/#placeholder-for-upcoming-tutorial-videos",
    "relUrl": "/tutorials/tutorial_basics/#placeholder-for-upcoming-tutorial-videos"
  },"82": {
    "doc": "Basics",
    "title": "Example",
    "content": ". | GdScript | c# | . | extends GdUnitTestSuite func test_example(): assert_str(\"This is a example message\").has_length(25).starts_with(\"This is a ex\") . | [TestCase] public Example2() AssertString(\"This is a example message\").HasLength(25).StartsWith(\"This is a ex\"); . | . ",
    "url": "/gdUnit3/tutorials/tutorial_basics/#example",
    "relUrl": "/tutorials/tutorial_basics/#example"
  },"83": {
    "doc": "Scene Runner",
    "title": "Using Scene Runner",
    "content": ". ",
    "url": "/gdUnit3/tutorials/tutorial_scene_runner/#using-scene-runner",
    "relUrl": "/tutorials/tutorial_scene_runner/#using-scene-runner"
  },"84": {
    "doc": "Scene Runner",
    "title": "Placeholder for upcoming Tutorial videos",
    "content": " ",
    "url": "/gdUnit3/tutorials/tutorial_scene_runner/#placeholder-for-upcoming-tutorial-videos",
    "relUrl": "/tutorials/tutorial_scene_runner/#placeholder-for-upcoming-tutorial-videos"
  },"85": {
    "doc": "Scene Runner",
    "title": "Example",
    "content": ". | GdScript | C# | . | Use the scene runner with scene_runner(&lt;scene&gt;) in which you load the scene to be tested. var runner := scene_runner(\"res://my_scene.tscn\") . | Use the scene runner with ISceneRunner.Load(&lt;scene&gt;) in which you load the scene to be tested. ISceneRunner runner = ISceneRunner.Load(\"res://my_scene.tscn\"); . | . ",
    "url": "/gdUnit3/tutorials/tutorial_scene_runner/#example",
    "relUrl": "/tutorials/tutorial_scene_runner/#example"
  },"86": {
    "doc": "Scene Runner",
    "title": "Scene Runner",
    "content": " ",
    "url": "/gdUnit3/tutorials/tutorial_scene_runner/",
    "relUrl": "/tutorials/tutorial_scene_runner/"
  },"87": {
    "doc": "C# Support",
    "title": "C# Test support",
    "content": "With version v2.0.0 GdUnit allows you to create and run C# tests directly in the Godot editor. To use the C# testing API, you should have Godot-Mono version 3.3.x installed. How to enable C# test support . To enable C# test support, follow the described installation steps . Using GdUnit3 on VisualStudio-Code . GdUnit provides an VS-Code extension like the GdUnit-Inspector for the Godot editor. The extension allows you to create run and debug C# sharp test direct inside the VS-Code IDE. ",
    "url": "/gdUnit3/faq/C%23/#c-test-support",
    "relUrl": "/faq/C%23/#c-test-support"
  },"88": {
    "doc": "C# Support",
    "title": "C# Support",
    "content": " ",
    "url": "/gdUnit3/faq/C%23/",
    "relUrl": "/faq/C%23/"
  },"89": {
    "doc": "Continuous Integration Testing",
    "title": "Continuous Integration Testing (CI)",
    "content": "Definition . Continuous Integration (CI) is a method for automating the integration of code changes made by multiple contributors to a single software project. It is a primary DevOps best practice that allows developers to frequently merge code changes into a central repository where builds and tests are executed. Automated tools are used to confirm the new code is bug-free before integration. Wiki - Continuous Integration . Command Line Tool . GdUnit3 provides a tool that allows you to deploy your CI workflow. For more details please show at Command Line Tool . Howto deploy for a specific Godot version . Using Docker image to export Godot Engine games and deploy to GitLab/GitHub Pages and Itch.io using GitLab CI and GitHub Actions. Provided by abarichello Docker image . Howto deploy with GitLab CI . You have to create a new workflow file on GitLab and named it .gitlab-ci.yml. Please visit GitLab CI Documentation for more detaild instructions . Thanks to mzoeller to providing this example workflow. image: barichello/godot-ci:3.4.4 cache: key: import-assets paths: - .import/ stages: - export - tests - deploy variables: EXPORT_NAME: $CI_PROJECT_NAME GIT_SUBMODULE_STRATEGY: recursive linux: stage: export script: - mkdir -v -p build/linux - godot -v --export \"Linux/X11\" build/linux/$EXPORT_NAME.x86_64 artifacts: name: $EXPORT_NAME-$CI_JOB_NAME paths: - build/linux gdunit3: stage: tests dependencies: - linux script: - export GODOT_BIN=/usr/local/bin/godot - ./runtest.sh -a ./test || if [ $? -eq 101 ]; then echo \"warnings\"; elif [ $? -eq 0 ]; then echo \"success\"; else exit 1; fi artifacts: when: always reports: junit: ./reports/report_1/results.xml . Howto deploy with GitHub Action . You have to create a new workflow file on GitHub .github/workflows/ and named it ci.yml. Please visit GitHub Workflows Page for more detaild instructions . Example workflow: . name: CI Godot 3.4.4 on: push: paths-ignore: - '**.yml' - '**.jpg' - '**.png' - '**.md' workflow_dispatch: jobs: testing: name: CI Godot 3.4.4 runs-on: ubuntu-latest continue-on-error: true container: image: barichello/godot-ci:3.4.4 steps: - name: Checkout uses: actions/checkout@v2 with: lfs: true submodules: 'recursive' - name: Run Selftest timeout-minutes: 10 env: GODOT_BIN: \"/usr/local/bin/godot\" shell: bash run: ./runtest.sh --selftest - name: Publish Test Reports if: always() uses: ./.github/actions/publish-test-report with: report-name: Test Report (3.4.4) - name: Collect Test Artifacts if: always() uses: actions/upload-artifact@v2 with: name: Report (3.4.4) path: reports/** . ",
    "url": "/gdUnit3/faq/ci/#continuous-integration-testing-ci",
    "relUrl": "/faq/ci/#continuous-integration-testing-ci"
  },"90": {
    "doc": "Continuous Integration Testing",
    "title": "Continuous Integration Testing",
    "content": " ",
    "url": "/gdUnit3/faq/ci/",
    "relUrl": "/faq/ci/"
  },"91": {
    "doc": "Test Case",
    "title": "Test-Case",
    "content": "Definition . A test case document described detailed summary of what scenarios will be tested. A test case must be start with the prefix test_ for GdScripts and annotated with [TestCase] for C# tests. Use a meaningfull name for your test to represent what the test does. | GdScript | C# | . | We named it test_string_to_lower() because we test the to_lower function on a string. Remeber we have to use the prefix test_ to indendicate this function is a test case. func test_string_to_lower() -&gt; void: assert_str(\"AbcD\".to_lower()).is_equal(\"abcd\") . | We named it StringToLower() because we test the ToLower function on a string. Remeber we have to use the annotation [TestCase] to indendicate this method is a test case. [TestCase] public void StringToLower() { AssertString(\"AbcD\".ToLower()).IsEqual(\"abcd\"); } . | . How to fail fast (Only GdScript) . A test case can fail by one or more assertions. This means that a test is not aborted at the first failed assertion. GdScript does not have exceptions that allow this, so we have to manually deal with a failed assertion here. For this we can use the function is_failure to test for an failure and abort. func test_foo(): # do some assertions assert_str(\"\").is_empty() # last assert was succes if is_failure(): return asset_str(\"abc\").is_empty() # last assert was failure, now abort the test here if is_failure(): return ... ",
    "url": "/gdUnit3/faq/test-case/#test-case",
    "relUrl": "/faq/test-case/#test-case"
  },"92": {
    "doc": "Test Case",
    "title": "Test Case",
    "content": " ",
    "url": "/gdUnit3/faq/test-case/",
    "relUrl": "/faq/test-case/"
  },"93": {
    "doc": "Test Suite",
    "title": "Test-Suite",
    "content": "Definition . A test-suite is a collection of tests basically alligned to a class you want to test. When writing tests, it is common to find that several tests need similar test data to created before and cleanup after test run. GdUnit test-suite runs in execution steps (hooks) where you allow to define preinitalisized test data. | Execution Step | Description | . | before | executed only once at test suite run is started | . | after | executed only once at test suite run has finished | . | before_test | executed before each test is started | . | after_test | executed after each test has finished | . | test | executes the test content | . ",
    "url": "/gdUnit3/faq/test-suite/#test-suite",
    "relUrl": "/faq/test-suite/#test-suite"
  },"94": {
    "doc": "Test Suite",
    "title": "Execution Graph for a test-suite",
    "content": ". | GdScript | C# | . | (Run) |- func before() -&gt; void: # init the test-suite | ... | [...] # loops over all tests |- func before_test() -&gt; void: # init next test-case | ... | &gt;--- | func test_1() -&gt; void: # execute test-case (1-n iterations) | ... &lt;--- |- func after_test() -&gt; void: # clean-up current test-case finished | ... [...] | - func after() -&gt; void: # clean-up test-suite finished | .... (END) . | (Run) |- [Before] // init the test-suite | public void Setup() {} | [...] // loops over all tests |- [BeforeTest] // init next test-case | public void SetupTest() {} | &gt;--- | [TestCase] // execute test-case (1-n iterations) | public void TestCase1() {} &lt;--- |- [AfterTest] // clean-up current test-case finished | public void TearDownTest() {} [...] | - [After] // clean-up test-suite finished | public void TearDownSuite() {} (END) . | . Using step before . | GdScript | C# | . | You can override the before() function in your test-suite to define a pre hook and prepare your test data. This function is called only once at the beginning of a test-suite execution. var _test_data :Node func before(): _test_data = Node.new() # create some test data here ... | You can annotate with [Before] in your test-suite to define a pre hook and prepare your test data. This method is called only once at the beginning of a test-suite execution. private Godot.Node _test_data; [Before] public void Setup() { _test_data = new Godot.Node() // create some test data here ... } . | . When you create objects in the before step than you have to manage the object to free at the end of a test-suite execution at step after. Alternativly you can use auto_free() to create object where will be automatically freed after test-suite execution. Using step after . | GdScript | C# | . | You can overwrite the after() function in your test-suite to define a shutdown hook and release pre-initialized test data. This function is called only once at the end of a test-suite execution. var _test_data :Node func after(): # give free resources where was created in before() _test_data.free() . | You can annotate a method with [After] in your test-suite to define a shutdown hook and release pre-initialized test data. This function is called only once at the end of a test-suite execution. private Godot.Node _test_data [After] public void TearDownSuite() { // give free resources where was created in before() _test_data.Free(); } . | . Using step before_test . | GdScript | C# | . | You can override the function before_test() to define a test pre hook to pre-initialized test data for each test. This function is called before each test execution. var _test_data :Node func before_test(): _test_data = Node.new() # initalizize you test data here ... | You can annotate a method with [BeforeTest] to define a test pre hook to pre-initialized test data for each test. This methos is called before each test execution. private Godot.Node _test_data [BeforeTest] public void SetupTest() { _test_data = new Godot.Node() // initalizize you test data here ... } . | . Using step after_test . | GdScript | C# | . | You can override the function after_test() to define a shutdown hook if you neeed to clean-up test data for each test. This function is called after each test execution. func after_test(): # clean up your test data ... | You can annotate a method with [AfterTest] to define a shutdown hook if you neeed to clean-up test data for each test. This function is called after each test execution. [AfterTest] public void TearDownTest() { # clean up your test data ... } . | . ",
    "url": "/gdUnit3/faq/test-suite/#execution-graph-for-a-test-suite",
    "relUrl": "/faq/test-suite/#execution-graph-for-a-test-suite"
  },"95": {
    "doc": "Test Suite",
    "title": "Test Suite",
    "content": " ",
    "url": "/gdUnit3/faq/test-suite/",
    "relUrl": "/faq/test-suite/"
  }
}
